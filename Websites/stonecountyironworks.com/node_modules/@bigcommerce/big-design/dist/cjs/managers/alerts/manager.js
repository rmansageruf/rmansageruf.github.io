"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlertsManager = void 0;
class AlertsManager {
  alerts = [];
  counter = 0;
  subscribers = [];
  timeout = {};
  typeMap = {
    error: 0,
    warning: 1,
    success: 2,
    info: 3
  };
  add = alert => {
    if (alert.key && this.containsKey(alert.key)) {
      this.remove(alert.key);
    }
    const key = alert.key === undefined ? this.getUniqueId() : alert.key;
    const onClose = () => {
      if (typeof alert.onClose === 'function') {
        alert.onClose();
      }
      this.remove(key);
    };
    const newAlert = {
      ...alert,
      key,
      onClose
    };
    this.alerts = this.alerts.concat([newAlert]).sort(this.sortAlerts);
    this.afterEvent();
    return key;
  };
  clear = () => {
    const removed = this.alerts;
    this.alerts = [];
    this.afterEvent();
    return removed;
  };
  remove = key => {
    let removed;
    this.alerts = this.alerts.reduce((acc, alert) => {
      if (alert.key === key) {
        removed = alert;
        return acc;
      }
      return [...acc, alert];
    }, []);
    this.afterEvent();
    return removed;
  };
  subscribe = subscriber => {
    this.subscribers.push(subscriber);
    return () => {
      this.subscribers = this.subscribers.filter(sub => sub !== subscriber);
    };
  };
  afterEvent() {
    this.manageTimeout();
    this.notifySubscribers();
  }
  manageTimeout() {
    const alert = this.alerts[0] ?? null;
    if (this.timeout?.key === alert?.key) {
      return;
    }
    if (this.timeout) {
      window.clearTimeout(this.timeout.id);
      this.timeout = {};
    }
    if (alert?.autoDismiss) {
      this.timeout.key = alert.key;
      this.timeout.id = window.setTimeout(alert.onClose, 5000);
    }
  }
  notifySubscribers() {
    this.subscribers.forEach(subscriber => subscriber(this.alerts[0] ?? null));
  }
  getUniqueId() {
    this.counter += 1;
    return `alert-${this.counter}`;
  }
  sortAlerts = (a, b) => {
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    return this.typeMap[a.type] - this.typeMap[b.type];
  };
  containsKey(key) {
    return !!this.alerts.find(alert => alert.key === key);
  }
}
const createAlertsManager = () => new AlertsManager();
exports.createAlertsManager = createAlertsManager;