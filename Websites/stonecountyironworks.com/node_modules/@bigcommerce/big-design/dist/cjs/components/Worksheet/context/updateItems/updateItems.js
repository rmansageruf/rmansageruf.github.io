"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateItemsProvider = exports.UpdateItemsContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../../utils");
var _hooks = require("../../hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const UpdateItemsContext = /*#__PURE__*/(0, _react.createContext)(null);
exports.UpdateItemsContext = UpdateItemsContext;
const UpdateItemsProvider = (0, _utils.typedMemo)(_ref => {
  let {
    children,
    items
  } = _ref;
  const {
    store,
    useStore
  } = (0, _hooks.useWorksheetStore)();
  const setRows = useStore(store, state => state.setRows);
  const addEditedCells = useStore(store, state => state.addEditedCells);
  const updateItems = (0, _react.useCallback)((cells, newValues) => {
    setRows(cells.reduce((accum, cell, index) => {
      const {
        hash,
        rowIndex
      } = cell;

      // Don't change since value is the same
      if (cell.value === newValues[index]) {
        return accum;
      }
      const row = accum[rowIndex];
      const updatedRow = {
        ...row,
        [hash]: newValues[index]
      };
      accum[rowIndex] = updatedRow;
      return accum;
    }, items));
    addEditedCells(cells.reduce((accum, cell, index) => {
      // Don't add since value is the same
      if (cell.value === newValues[index]) {
        return accum;
      }
      return [...accum, {
        ...cell,
        value: newValues[index]
      }];
    }, []));
  }, [addEditedCells, items, setRows]);
  const providerValue = (0, _react.useMemo)(() => ({
    updateItems
  }), [updateItems]);
  return /*#__PURE__*/_react.default.createElement(UpdateItemsContext.Provider, {
    value: providerValue
  }, children);
});
exports.UpdateItemsProvider = UpdateItemsProvider;