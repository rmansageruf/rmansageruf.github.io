"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordion = void 0;
var _bigDesignIcons = require("@bigcommerce/big-design-icons");
var _react = _interopRequireWildcard(require("react"));
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Accordion = /*#__PURE__*/(0, _react.memo)(_ref => {
  let {
    children,
    header,
    iconLeft,
    isExpanded,
    onClick
  } = _ref;
  const accordionId = (0, _react.useId)();
  const accordionItemId = (0, _react.useId)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_styled.StyledAccordionButton, {
    "aria-controls": accordionItemId,
    "aria-expanded": isExpanded,
    iconLeft: iconLeft,
    iconRight: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ExpandMoreIcon, {
      className: "collapse-icon",
      color: "secondary70"
    }),
    id: accordionId,
    isExpanded: isExpanded,
    onClick: onClick,
    type: "button",
    variant: "subtle"
  }, header), /*#__PURE__*/_react.default.createElement(_styled.StyledAccordionContent, {
    "aria-labelledby": accordionId,
    display: isExpanded ? 'block' : 'none',
    hidden: !isExpanded,
    iconLeft: iconLeft,
    id: accordionItemId,
    role: "region"
  }, children));
});
exports.Accordion = Accordion;