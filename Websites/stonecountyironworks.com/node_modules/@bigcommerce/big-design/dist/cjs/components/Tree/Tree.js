"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeContext = exports.Tree = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _styled = require("./styled");
var _TreeNode = require("./TreeNode");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// We don't have access to the type yet, so we need to pass any into the generic.
const TreeContext = /*#__PURE__*/(0, _react.createContext)({
  expandable: {
    expandedNodes: []
  },
  focusable: {
    focusedNode: '',
    onFocus: () => null
  },
  onKeyDown: () => null,
  treeRef: {
    current: null
  }
});
exports.TreeContext = TreeContext;
const Tree = _ref => {
  let {
    disabledNodes,
    expandable,
    focusable,
    iconless,
    id,
    nodes,
    onKeyDown,
    onNodeClick,
    selectable
  } = _ref;
  const treeRef = (0, _react.useRef)(null);
  const initialTreeContext = {
    disabledNodes,
    expandable,
    focusable,
    iconless,
    onKeyDown,
    onNodeClick,
    selectable,
    treeRef
  };
  const renderedItems = (0, _react.useMemo)(() => nodes.map((node, index) => /*#__PURE__*/_react.default.createElement(_TreeNode.TreeNode, (0, _extends2.default)({}, node, {
    key: index
  }))), [nodes]);
  return /*#__PURE__*/_react.default.createElement(TreeContext.Provider, {
    value: initialTreeContext
  }, /*#__PURE__*/_react.default.createElement(_styled.StyledUl, {
    "aria-multiselectable": selectable?.type === 'multi',
    id: id,
    ref: treeRef,
    role: "tree",
    style: {
      overflow: 'hidden'
    }
  }, renderedItems));
};
exports.Tree = Tree;