"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collapse = void 0;
var _bigDesignIcons = require("@bigcommerce/big-design-icons");
var _react = _interopRequireWildcard(require("react"));
var _Box = require("../Box");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Collapse = _ref => {
  let {
    children,
    title,
    onCollapseChange,
    initiallyOpen = false
  } = _ref;
  const [isOpen, setIsOpen] = (0, _react.useState)(initiallyOpen);
  const triggerId = (0, _react.useId)();
  const panelId = (0, _react.useId)();
  const handleTitleClick = () => {
    const nextIsOpen = !isOpen;
    setIsOpen(nextIsOpen);
    if (typeof onCollapseChange === 'function') {
      onCollapseChange(nextIsOpen);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_styled.StyledButton, {
    "aria-controls": panelId,
    "aria-expanded": isOpen,
    iconRight: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ExpandMoreIcon, {
      title: title
    }),
    id: triggerId,
    isOpen: isOpen,
    marginVertical: "small",
    onClick: handleTitleClick,
    variant: "subtle"
  }, title), /*#__PURE__*/_react.default.createElement(_Box.Box, {
    "aria-labelledby": triggerId,
    display: isOpen ? 'block' : 'none',
    hidden: !isOpen,
    id: panelId,
    role: "region"
  }, children));
};
exports.Collapse = Collapse;