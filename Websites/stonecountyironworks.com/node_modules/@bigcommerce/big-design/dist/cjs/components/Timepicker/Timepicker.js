"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timepicker = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
var _Select = require("../Select");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const RawTimePicker = _ref => {
  let {
    error,
    forwardedRef,
    label,
    locale = 'en-US',
    localization,
    onTimeChange,
    value,
    ...props
  } = _ref;
  const localizationProvider = (0, _utils.createLocalizationProvider)(locale);
  const options = (0, _react.useMemo)(() => (0, _utils.getTimeIntervals)(localizationProvider), [localizationProvider]);
  return /*#__PURE__*/_react.default.createElement(_Select.Select, (0, _extends2.default)({
    autoWidth: true,
    error: error,
    inputRef: forwardedRef,
    label: label,
    localization: localization,
    onOptionChange: onTimeChange,
    options: options,
    placeholder: "hh : mm",
    value: value
  }, props));
};
const Timepicker = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(RawTimePicker, (0, _extends2.default)({}, props, {
    forwardedRef: ref
  }));
}));
exports.Timepicker = Timepicker;