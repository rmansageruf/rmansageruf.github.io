"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Tabs = /*#__PURE__*/(0, _react.memo)(_ref => {
  let {
    activeTab,
    children,
    className,
    items = [],
    onTabClick,
    style,
    role,
    ...props
  } = _ref;
  const handleOnTabClick = event => {
    event.preventDefault();
    const tabId = event.currentTarget.id;
    if (tabId !== activeTab && typeof onTabClick === 'function') {
      onTabClick(tabId);
    }
  };
  const activeItem = activeTab && items[Number(activeTab)];
  const missingAriaControls = items.some(item => !item.ariaControls);
  const missingFallback = activeItem && !document.getElementById(activeItem.ariaControls || `${activeItem.id}-content`);
  if (missingAriaControls || missingFallback) {
    (0, _utils.warning)('TabItems must have an ariaControls field, otherwise, an element with fallback ID "{tab.id}-content" must exist in the DOM');
  }
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTabs, (0, _extends2.default)({}, props, {
    flexDirection: "row",
    role: "tablist"
  }), items.map(_ref2 => {
    let {
      ariaControls,
      id,
      title,
      disabled
    } = _ref2;
    return /*#__PURE__*/_react.default.createElement(_styled.StyledTab, {
      activeTab: activeTab,
      "aria-controls": ariaControls || `${id}-content`,
      "aria-selected": id === activeTab ? 'true' : 'false',
      disabled: disabled,
      id: id,
      key: id,
      onClick: handleOnTabClick,
      role: "tab",
      tabIndex: id === activeTab ? -1 : 0
    }, title);
  }));
});
exports.Tabs = Tabs;
Tabs.displayName = 'Tabs';