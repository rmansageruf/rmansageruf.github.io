"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSelectable = void 0;
var _react = require("react");
var _hooks = require("../../../../hooks");
var _helpers = require("./helpers");
const useSelectable = selectable => {
  const isSelectable = Boolean(selectable);
  const isChildrenRowsSelectable = selectable?.isChildrenRowsSelectable ?? false;
  const [selectedItems, setSelectedItems] = (0, _react.useState)({});
  const [selectedParentRowsCrossPages, setSelectedParentRowsCrossPages] = (0, _react.useState)(() => {
    const initialSelectedParentRows = selectable?.initialSelectedParentRows ?? [];
    if (initialSelectedParentRows.length) {
      const initialSelectedParentRowsCrossPages = new Set(initialSelectedParentRows);
      return new Set(initialSelectedParentRowsCrossPages);
    }
    return new Set();
  });
  const onItemSelectEventCallback = (0, _hooks.useEventCallback)(_ref => {
    let {
      isParentRow,
      parentRowId,
      childRowId,
      childrenRowsIds
    } = _ref;
    if (!selectable) {
      return;
    }
    const {
      onSelectionChange
    } = selectable;
    if (isParentRow) {
      const newSelectedItems = (0, _helpers.selectParentRow)({
        selectedItems,
        setSelectedParentRowsCrossPages,
        parentRowId,
        childRowId,
        isChildrenRowsSelectable,
        childrenRowsIds
      });
      onSelectionChange(newSelectedItems);
    } else {
      const totalSelectedChildRows = (0, _helpers.getTotalSelectedChildRows)({
        selectedItems,
        parentRowId,
        setSelectedParentRowsCrossPages,
        childRowId,
        childrenRowsIds
      });
      const isTheOnlySelectedChildRow = totalSelectedChildRows === 1;
      const newSelectedItems = (0, _helpers.selectChildRow)({
        isTheOnlySelectedChildRow,
        selectedItems,
        parentRowId,
        setSelectedParentRowsCrossPages,
        childRowId,
        isChildrenRowsSelectable,
        childrenRowsIds
      });
      onSelectionChange(newSelectedItems);
    }
  });
  (0, _react.useEffect)(() => {
    if (selectable?.selectedItems) {
      setSelectedItems({
        ...selectable.selectedItems
      });
    }
  }, [selectable?.selectedItems]);
  return {
    isSelectable,
    onItemSelect: isSelectable ? onItemSelectEventCallback : undefined,
    selectedItems,
    isChildrenRowsSelectable,
    selectedParentRowsCrossPages,
    setSelectedParentRowsCrossPages
  };
};
exports.useSelectable = useSelectable;