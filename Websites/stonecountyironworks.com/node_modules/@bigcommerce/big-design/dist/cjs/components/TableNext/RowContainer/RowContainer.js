"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RowContainer = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../utils");
var _Button = require("../../Button/Button");
var _DataCell = require("../DataCell");
var _Row = require("../Row");
var _helpers = require("./helpers");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const InternalRowContainer = _ref => {
  let {
    isDragging,
    columns,
    expandedRows,
    forwardedRef,
    headerCellWidths,
    isExpandable = false,
    isSelectable = false,
    item,
    getLoadMoreAction,
    parentRowIndex,
    showDragIcon,
    getChildren,
    getItemKey,
    onItemSelect,
    onExpandedRow,
    isChildrenRowsSelectable = false,
    selectedItems,
    getRowId = () => '',
    ...rest
  } = _ref;
  const parentRowId = getRowId(item, parentRowIndex);
  const isParentRowSelected = selectedItems[parentRowId] !== undefined;
  const isExpanded = expandedRows[parentRowId] !== undefined;
  const childrenRows = getChildren ? getChildren?.(item) : [];
  const isDraggable = showDragIcon === true;
  const loadMoreAction = getLoadMoreAction?.(parentRowId);
  const childrenRowsIds = childrenRows?.map((childRow, childRowIndex) => {
    return getRowId(childRow, parentRowIndex, childRowIndex);
  }) ?? [];
  const onParentRowSelect = () => {
    if (onItemSelect) {
      onItemSelect({
        isParentRow: true,
        parentRowId,
        childRowId: undefined,
        childrenRowsIds
      });
    }
  };
  const onExpandedRowChange = () => {
    if (onExpandedRow) {
      onExpandedRow(parentRowId);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Row.Row, (0, _extends2.default)({
    childrenRowsIds: childrenRowsIds,
    columns: columns,
    headerCellWidths: headerCellWidths,
    isChildrenRowsSelectable: isChildrenRowsSelectable,
    isDraggable: isDraggable,
    isDragging: isDragging,
    isExpandable: isExpandable,
    isExpanded: isExpanded,
    isParentRow: true,
    isSelectable: isSelectable,
    isSelected: isParentRowSelected,
    item: item,
    onExpandedRow: onExpandedRowChange,
    onItemSelect: onParentRowSelect,
    parentRowId: parentRowId,
    ref: forwardedRef,
    selectedItems: selectedItems,
    showDragIcon: showDragIcon
  }, rest)), childrenRows && isExpanded && childrenRows?.map((childRow, childRowIndex) => {
    const key = getItemKey(childRow, childRowIndex);
    const childRowId = getRowId(childRow, parentRowIndex, childRowIndex);
    const isChildRowSelected = selectedItems[childRowId] !== undefined;
    const onChilRowSelect = () => {
      if (onItemSelect) {
        onItemSelect({
          isParentRow: false,
          parentRowId,
          childRowId,
          childrenRowsIds
        });
      }
    };
    return /*#__PURE__*/_react.default.createElement(_Row.Row, {
      childRowId: childRowId,
      childrenRowsIds: childrenRowsIds,
      columns: columns,
      headerCellWidths: headerCellWidths,
      isChildrenRowsSelectable: isChildrenRowsSelectable,
      isDraggable: isDraggable,
      isDragging: false,
      isExpandable: isExpandable,
      isParentRow: false,
      isSelectable: isSelectable // for rendering extra cells
      ,
      isSelected: isChildRowSelected,
      item: childRow,
      key: key,
      onItemSelect: onChilRowSelect,
      parentRowId: parentRowId,
      selectedItems: selectedItems,
      showDragIcon: showDragIcon
    });
  }), isExpanded && childrenRows !== undefined && loadMoreAction && /*#__PURE__*/_react.default.createElement("tr", {
    key: `extra-helper-row-${parentRowIndex}`
  }, /*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
    colSpan: (0, _helpers.calculateColSpan)({
      columns,
      isExpandable,
      isDraggable,
      isSelectable
    })
  }, /*#__PURE__*/_react.default.createElement(_Button.StyleableButton, {
    isLoading: loadMoreAction.isLoading,
    onClick: e => loadMoreAction.onClick(e, parentRowIndex),
    style: {
      width: '100%'
    },
    variant: "subtle"
  }, loadMoreAction.text))));
};
const RowContainer = (0, _utils.typedMemo)( /*#__PURE__*/(0, _react.forwardRef)((props, ref) => /*#__PURE__*/_react.default.createElement(InternalRowContainer, (0, _extends2.default)({}, props, {
  forwardedRef: ref
}))));
exports.RowContainer = RowContainer;