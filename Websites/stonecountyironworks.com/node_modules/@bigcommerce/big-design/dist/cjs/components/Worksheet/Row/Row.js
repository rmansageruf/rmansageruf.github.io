"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../utils");
var _Cell = require("../Cell");
var _hooks = require("../hooks");
var _RowStatus = require("../RowStatus");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const InternalRow = _ref => {
  let {
    columns,
    rowIndex
  } = _ref;
  const {
    store,
    useStore
  } = (0, _hooks.useWorksheetStore)();
  const row = useStore(store, (0, _react.useMemo)(() => state => state.rows[rowIndex], [rowIndex]));
  const nextRow = useStore(store, (0, _react.useMemo)(() => state => state.rows[rowIndex + 1] || null, [rowIndex]));
  const expandableRows = useStore(store, (0, _react.useMemo)(() => state => state.expandableRows, []));
  const isExpanded = useStore(store, (0, _react.useMemo)(() => state => !state.hiddenRows.includes(row.id), [row.id]));
  const isDisabled = useStore(store, (0, _react.useMemo)(() => state => state.disabledRows.includes(row.id), [row.id]));
  const parentId = (0, _react.useMemo)(() => {
    if (!expandableRows) {
      return;
    }
    const rowIds = Object.keys(expandableRows);
    return rowIds.find(rowId => expandableRows[rowId].find(childId => childId === row.id));
  }, [expandableRows, row.id]);
  const isChild = (0, _react.useMemo)(() => parentId !== undefined, [parentId]);
  const hasFormatting = (0, _react.useCallback)(column => {
    return column.type === 'text' || column.type === 'number' || column.type === 'modal';
  }, []);
  const isLastChild = (0, _react.useMemo)(() => expandableRows ? Object.values(expandableRows).reduce((accum, item) => [...accum, item[item.length - 1]], []).includes(row.id) : false, [expandableRows, row.id]);
  const getIsCellDisabled = (0, _react.useCallback)(_ref2 => {
    let {
      enabled,
      disabled
    } = _ref2;
    if (typeof enabled === 'boolean' && enabled) {
      return false;
    }
    return disabled || isDisabled;
  }, [isDisabled]);
  if (isChild && !isExpanded) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement(_RowStatus.RowStatus, {
    rowIndex: rowIndex
  }), columns.map((column, columnIndex) => /*#__PURE__*/_react.default.createElement(_Cell.Cell, {
    columnIndex: columnIndex,
    disabled: getIsCellDisabled(column),
    formatting: hasFormatting(column) ? column.formatting : undefined,
    hash: column.hash,
    isChild: isChild,
    isLastChild: isLastChild,
    key: `${rowIndex}-${columnIndex}`,
    nextRowValue: nextRow && nextRow[column.hash] || '',
    notation: column.notation,
    options: column.type === 'select' ? column.config.options : undefined,
    rowId: row.id,
    rowIndex: rowIndex,
    type: column.type ?? 'text',
    validation: column.validation,
    value: row[column.hash] ?? ''
  })));
};
const Row = (0, _utils.typedMemo)(InternalRow);
exports.Row = Row;