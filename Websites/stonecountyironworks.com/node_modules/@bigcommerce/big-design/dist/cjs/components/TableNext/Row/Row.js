"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _bigDesignIcons = require("@bigcommerce/big-design-icons");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../utils");
var _private = require("../../Button/private");
var _Checkbox = require("../../Checkbox");
var _Flex = require("../../Flex");
var _DataCell = require("../DataCell");
var _styled = require("./styled");
var _useRowState = require("./useRowState");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ALIGN_MAP = {
  left: 'flex-start',
  right: 'flex-end',
  center: 'center'
};
const InternalRow = _ref => {
  let {
    columns,
    forwardedRef,
    headerCellWidths,
    isDraggable,
    isDragging = false,
    isExpandable = false,
    isSelectable = false,
    isSelected = false,
    item,
    showDragIcon = false,
    onItemSelect,
    onExpandedRow,
    isExpanded = false,
    selectedItems,
    isParentRow = false,
    isChildrenRowsSelectable = false,
    parentRowId,
    childRowId,
    childrenRowsIds,
    ...rest
  } = _ref;
  const {
    hasChildrenRows,
    isChecked,
    isIndeterminate,
    label
  } = (0, _useRowState.useRowState)({
    isParentRow,
    isSelected,
    selectedItems,
    isChildrenRowsSelectable,
    childrenRowsIds
  });
  const renderSelectDataCell = () => {
    if (isSelectable && isParentRow) {
      return /*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
        isCheckbox: true,
        isExpandable: isExpandable,
        key: "data-checkbox",
        width: 10
      }, /*#__PURE__*/_react.default.createElement(_Checkbox.Checkbox, {
        checked: isChecked,
        hiddenLabel: true,
        isIndeterminate: isIndeterminate,
        label: label,
        onChange: onItemSelect,
        width: 0
      }));
    }
    return null;
  };
  const renderDragIconCell = () => {
    if (showDragIcon && isParentRow) {
      return /*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
        padding: "small",
        width: headerCellWidths[0]
      }, /*#__PURE__*/_react.default.createElement(_bigDesignIcons.DragIndicatorIcon, null));
    }
    return null;
  };
  const renderExpandedIconCell = () => {
    if (isExpandable && isParentRow && hasChildrenRows) {
      const needsHorizontalPadding = !isSelectable && !isDraggable;
      return /*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
        align: "center",
        paddingHorizontal: needsHorizontalPadding ? 'small' : 'none'
      }, /*#__PURE__*/_react.default.createElement(_private.MessagingButton, {
        iconOnly: isExpanded ? /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ExpandMoreIcon, null) : /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ChevronRightIcon, null),
        onClick: onExpandedRow,
        type: "button",
        variant: "subtle"
      }));
    }
    return null;
  };
  const renderExtraCellsForParentRow = () => {
    if (!hasChildrenRows) {
      return [/*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
        key: `parent-extra-cell-${parentRowId}-1`
      })];
    }
    return [];
  };
  const renderExtraCellsForChildRow = () => {
    const extraDataCells = [/*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
      key: `child-extra-cell-${childRowId}-0`
    })];
    if (isDraggable) {
      extraDataCells.push( /*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
        key: `child-extra-cell-${childRowId}-1`
      }));
    }
    if (isSelectable) {
      extraDataCells.push( /*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
        key: `child-extra-cell-${childRowId}-2`
      }));
    }
    return extraDataCells;
  };
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableRow, (0, _extends2.default)({
    isDragging: isDragging,
    isSelected: isSelected,
    ref: forwardedRef
  }, rest), renderDragIconCell(), isParentRow && renderSelectDataCell(), renderExpandedIconCell(), isParentRow && isExpandable && renderExtraCellsForParentRow(), isExpandable && !isParentRow && renderExtraCellsForChildRow(), columns.map((_ref2, columnIndex) => {
    let {
      render: CellContent,
      align,
      display,
      verticalAlign,
      width,
      withPadding = true
    } = _ref2;
    const cellWidth = headerCellWidths[columnIndex + 1];
    return /*#__PURE__*/_react.default.createElement(_DataCell.DataCell, {
      align: align,
      display: display,
      key: columnIndex,
      padding: withPadding ? 'small' : 'none',
      verticalAlign: verticalAlign,
      width: isDragging ? cellWidth : width
    }, /*#__PURE__*/_react.default.createElement(_Flex.Flex, {
      alignItems: "center",
      flexDirection: "row",
      justifyContent: align && ALIGN_MAP[align]
    }, columnIndex === 0 && !isParentRow && isChildrenRowsSelectable && /*#__PURE__*/_react.default.createElement(_Checkbox.Checkbox, {
      checked: isSelected,
      hiddenLabel: true,
      label: label,
      onChange: onItemSelect,
      width: 0
    }), /*#__PURE__*/_react.default.createElement(CellContent, item)));
  }));
};
const Row = (0, _utils.typedMemo)( /*#__PURE__*/(0, _react.forwardRef)((props, ref) => /*#__PURE__*/_react.default.createElement(InternalRow, (0, _extends2.default)({}, props, {
  forwardedRef: ref
}))));
exports.Row = Row;