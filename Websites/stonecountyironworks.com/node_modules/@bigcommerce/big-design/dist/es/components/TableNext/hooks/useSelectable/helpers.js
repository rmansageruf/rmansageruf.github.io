export function selectParentRow(_ref) {
  let {
    selectedItems,
    setSelectedParentRowsCrossPages,
    childRowId,
    parentRowId,
    isChildrenRowsSelectable,
    childrenRowsIds
  } = _ref;
  const isSelectedParent = selectedItems[parentRowId] !== undefined;
  if (isSelectedParent) {
    const newSelectedItems = unselectParent({
      selectedItems,
      setSelectedParentRowsCrossPages,
      childRowId,
      parentRowId,
      isChildrenRowsSelectable,
      childrenRowsIds
    });
    return newSelectedItems;
  }
  const newSelectedItems = selectParent({
    selectedItems,
    parentRowId,
    setSelectedParentRowsCrossPages,
    childRowId,
    isChildrenRowsSelectable,
    childrenRowsIds
  });
  return newSelectedItems;
}
function unselectParent(_ref2) {
  let {
    selectedItems,
    parentRowId,
    setSelectedParentRowsCrossPages,
    childRowId,
    isChildrenRowsSelectable,
    childrenRowsIds
  } = _ref2;
  const hasChildrenRows = Boolean(childrenRowsIds.length);

  // If parent has children, unselect it's childrenRows
  if (hasChildrenRows && isChildrenRowsSelectable) {
    const newSelectedItems = unselectParentAndChildren({
      selectedItems,
      parentRowId,
      setSelectedParentRowsCrossPages,
      childRowId,
      childrenRowsIds
    });
    return newSelectedItems;
  }
  setSelectedParentRowsCrossPages(prevSelectedParentsRowsCrossPages => {
    const newSet = new Set([...prevSelectedParentsRowsCrossPages]);
    newSet.delete(parentRowId);
    return newSet;
  });

  // Unselect the parent row
  const newSelectedItems = Object.entries(selectedItems).filter(_ref3 => {
    let [key] = _ref3;
    return key !== parentRowId;
  });
  return Object.fromEntries(newSelectedItems);
}
function unselectParentAndChildren(_ref4) {
  let {
    selectedItems,
    parentRowId,
    setSelectedParentRowsCrossPages,
    childrenRowsIds
  } = _ref4;
  setSelectedParentRowsCrossPages(prevSelectedParentsRowsCrossPages => {
    const newSet = new Set([...prevSelectedParentsRowsCrossPages]);
    newSet.delete(parentRowId);
    return newSet;
  });
  const newSelectedItems = {
    ...selectedItems
  };
  delete newSelectedItems[parentRowId];
  childrenRowsIds?.forEach(childRowId => {
    delete newSelectedItems[childRowId];
  });
  return newSelectedItems;
}
function selectParent(_ref5) {
  let {
    selectedItems,
    parentRowId,
    setSelectedParentRowsCrossPages,
    childRowId,
    isChildrenRowsSelectable,
    childrenRowsIds
  } = _ref5;
  const hasChildrenRows = Boolean(childrenRowsIds.length);

  // If parent has children, select it's childrenRows
  if (hasChildrenRows && isChildrenRowsSelectable) {
    const newSelectedItems = selectParentAndChildren({
      selectedItems,
      parentRowId,
      childRowId,
      setSelectedParentRowsCrossPages,
      childrenRowsIds
    });
    return newSelectedItems;
  }
  setSelectedParentRowsCrossPages(prevSelectedParentsRowsCrossPages => {
    const newSet = new Set([...prevSelectedParentsRowsCrossPages]);
    newSet.add(parentRowId);
    return newSet;
  });
  return {
    ...selectedItems,
    [parentRowId]: true
  };
}
function selectParentAndChildren(_ref6) {
  let {
    selectedItems,
    parentRowId,
    setSelectedParentRowsCrossPages,
    childrenRowsIds
  } = _ref6;
  setSelectedParentRowsCrossPages(prevSelectedParentsRowsCrossPages => {
    const newSet = new Set([...prevSelectedParentsRowsCrossPages]);
    newSet.add(parentRowId);
    return newSet;
  });
  const newSelectedItems = {
    ...selectedItems
  };
  newSelectedItems[parentRowId] = true;
  childrenRowsIds?.forEach(childRowId => {
    newSelectedItems[childRowId] = true;
  });
  return newSelectedItems;
}
export function selectChildRow(_ref7) {
  let {
    childRowId,
    isTheOnlySelectedChildRow,
    selectedItems,
    parentRowId,
    setSelectedParentRowsCrossPages,
    childrenRowsIds
  } = _ref7;
  const isSelectedParent = selectedItems[parentRowId] !== undefined;
  if (!isSelectedParent) {
    const newSelectedItems = selectChild({
      selectedItems,
      parentRowId,
      childRowId,
      setSelectedParentRowsCrossPages,
      childrenRowsIds
    });
    return newSelectedItems;
  }
  const isSelectedChild = childRowId !== undefined && selectedItems[childRowId];
  if (isSelectedChild) {
    const newSelectedItems = unselectChild({
      selectedItems,
      isTheOnlySelectedChildRow,
      setSelectedParentRowsCrossPages,
      parentRowId,
      childRowId,
      childrenRowsIds
    });
    return newSelectedItems;
  }

  // Parent is selected (partially) but child is not selected.
  const newSelectedItems = {
    ...selectedItems
  };
  newSelectedItems[`${childRowId}`] = true;
  return newSelectedItems;
}
function selectChild(_ref8) {
  let {
    selectedItems,
    parentRowId,
    setSelectedParentRowsCrossPages,
    childRowId
  } = _ref8;
  const newSelectedItems = {
    ...selectedItems
  };
  setSelectedParentRowsCrossPages(prevSelectedParentsRowsCrossPages => {
    const newSet = new Set([...prevSelectedParentsRowsCrossPages]);
    newSet.add(parentRowId);
    return newSet;
  });
  newSelectedItems[`${parentRowId}`] = true;
  newSelectedItems[`${childRowId}`] = true;
  return newSelectedItems;
}
function unselectChild(_ref9) {
  let {
    selectedItems,
    isTheOnlySelectedChildRow,
    setSelectedParentRowsCrossPages,
    parentRowId,
    childRowId
  } = _ref9;
  const newSelectedItems = Object.entries(selectedItems).filter(_ref10 => {
    let [key] = _ref10;
    return key !== `${childRowId}`;
  }).filter(_ref11 => {
    let [key] = _ref11;
    // Unselect the parent row if it's the only selected child.
    if (isTheOnlySelectedChildRow) {
      setSelectedParentRowsCrossPages(prevSelectedParentsRowsCrossPages => {
        const newSet = new Set([...prevSelectedParentsRowsCrossPages]);
        newSet.delete(parentRowId);
        return newSet;
      });
      return key !== `${parentRowId}`;
    }
    return true;
  });
  return Object.fromEntries(newSelectedItems);
}
export function getTotalSelectedChildRows(_ref12) {
  let {
    selectedItems,
    childrenRowsIds
  } = _ref12;
  return childrenRowsIds?.reduce((acc, childRowId) => {
    if (selectedItems[childRowId] !== undefined) {
      return acc + 1;
    }
    return acc;
  }, 0);
}