import React, { createRef, useCallback, useEffect, useMemo } from 'react';
import { typedMemo } from '../../../../utils';
import { Flex } from '../../../Flex';
import { Small } from '../../../Typography';
import { useWorksheetStore } from '../../hooks';
import { StyledButton, StyledFlexItem } from './styled';
const InternalModalEditor = _ref => {
  let {
    cell,
    formatting,
    isEditing
  } = _ref;
  const {
    store,
    useStore
  } = useWorksheetStore();
  const setOpenModal = useStore(store, state => state.setOpenModal);
  const setEditingCell = useStore(store, state => state.setEditingCell);
  const {
    hash,
    value
  } = cell;
  const buttonRef = /*#__PURE__*/createRef();
  useEffect(() => {
    if (isEditing) {
      setOpenModal(hash);
    }
  }, [hash, isEditing, setOpenModal]);
  const handleClick = useCallback(() => {
    setEditingCell({
      cell
    });
  }, [cell, setEditingCell]);
  const renderedValue = useMemo(() => typeof formatting === 'function' ? formatting(value) : `${value}`, [formatting, value]);
  return /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    flexWrap: "wrap",
    justifyContent: "space-between"
  }, /*#__PURE__*/React.createElement(StyledFlexItem, {
    flexShrink: 1,
    paddingRight: "small"
  }, /*#__PURE__*/React.createElement(Small, {
    color: cell.disabled ? 'secondary50' : 'secondary70',
    ellipsis: true,
    title: renderedValue
  }, renderedValue)), /*#__PURE__*/React.createElement(StyledButton, {
    disabled: cell.disabled,
    onClick: handleClick,
    ref: buttonRef,
    variant: "subtle"
  }, "Edit"));
};
export const ModalEditor = typedMemo(InternalModalEditor);