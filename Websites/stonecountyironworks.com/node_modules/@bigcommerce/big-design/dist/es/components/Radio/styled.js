import { theme as defaultTheme } from '@bigcommerce/big-design-theme';
import { hideVisually } from 'polished';
import styled, { css } from 'styled-components';
import { withTransition } from '../../mixins/transitions';
export const RadioLabelContainer = /*#__PURE__*/styled.div.withConfig({
  displayName: "styled__RadioLabelContainer",
  componentId: "sc-1x9u9a8-0"
})(["margin-left:", ";"], _ref => {
  let {
    theme
  } = _ref;
  return theme.spacing.xSmall;
});
export const RadioContainer = /*#__PURE__*/styled.div.withConfig({
  displayName: "styled__RadioContainer",
  componentId: "sc-1x9u9a8-1"
})(["align-items:flex-start;display:flex;"]);
export const HiddenRadio = /*#__PURE__*/styled.input.withConfig({
  displayName: "styled__HiddenRadio",
  componentId: "sc-1x9u9a8-2"
})(["", ""], hideVisually());
export const StyledRadio = /*#__PURE__*/styled.label.withConfig({
  displayName: "styled__StyledRadio",
  componentId: "sc-1x9u9a8-3"
})(["", " background-color:", ";border:", ";border-color:", ";border-radius:", ";color:", ";cursor:pointer;display:inline-block;flex-shrink:0;height:", ";position:relative;user-select:none;width:", ";", ";&:hover{border-color:", ";}", ":focus + &{box-shadow:", ";}&:after{", " background-color:", ";border-radius:50%;content:'';height:", ";left:50%;opacity:0;position:absolute;top:50%;transform:translate(-50%,-50%);width:", ";}", ""], withTransition(['border-color', 'box-shadow']), _ref2 => {
  let {
    disabled,
    theme
  } = _ref2;
  return disabled ? theme.colors.secondary10 : theme.colors.white;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.border.box;
}, props => props.checked ? props.theme.colors.primary40 : props.theme.colors.secondary30, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.borderRadius.circle;
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.colors.white;
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return theme.spacing.large;
}, _ref7 => {
  let {
    theme
  } = _ref7;
  return theme.spacing.large;
}, _ref8 => {
  let {
    disabled,
    theme
  } = _ref8;
  return disabled && css(["cursor:not-allowed;border-color:", ";"], theme.colors.secondary30);
}, _ref9 => {
  let {
    checked,
    disabled,
    theme
  } = _ref9;
  return !disabled && (checked ? theme.colors.primary50 : theme.colors.secondary40);
}, HiddenRadio, _ref10 => {
  let {
    theme
  } = _ref10;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.primary20}`;
}, withTransition(['opacity']), _ref11 => {
  let {
    disabled,
    theme
  } = _ref11;
  return disabled ? theme.colors.secondary40 : theme.colors.primary40;
}, _ref12 => {
  let {
    theme
  } = _ref12;
  return theme.spacing.small;
}, _ref13 => {
  let {
    theme
  } = _ref13;
  return theme.spacing.small;
}, props => props.checked && css(["&:after{opacity:1;}"]));
StyledRadio.defaultProps = {
  theme: defaultTheme
};
RadioLabelContainer.defaultProps = {
  theme: defaultTheme
};