import { useContext } from 'react';
import { createStore, useStore } from 'zustand';
import { deleteCells, getCellsMap, getHiddenRows, mergeCells } from '../../utils';
import { WorksheetContext } from '../../Worksheet';
export const createWorksheetStore = () => createStore(set => ({
  columns: [],
  editedCells: [],
  editedCellsMap: {},
  editingCell: null,
  isMetaKey: false,
  isShiftPressed: false,
  isAutoFillActive: false,
  isSelectingActive: false,
  isBlockedFillOut: false,
  isControlKey: false,
  editWithValue: '',
  expandableRows: {},
  disabledRows: [],
  hiddenRows: [],
  invalidCells: [],
  invalidCellsMap: {},
  openedModal: null,
  rows: [],
  selectedCells: [],
  selectedCellsMap: {},
  selectedRows: [],
  tableRef: null,
  addEditedCells: cells => set(state => {
    const editedCells = mergeCells(state.editedCells, cells);
    return {
      ...state,
      editedCells,
      editedCellsMap: getCellsMap(editedCells)
    };
  }),
  addInvalidCells: cells => set(state => {
    const invalidCells = mergeCells(state.invalidCells, cells);
    return {
      ...state,
      invalidCells,
      invalidCellsMap: getCellsMap(invalidCells)
    };
  }),
  removeInvalidCells: cells => set(state => {
    const invalidCells = deleteCells(state.invalidCells, cells);
    return {
      ...state,
      invalidCells,
      invalidCellsMap: getCellsMap(invalidCells)
    };
  }),
  resetInvalidCells: () => set(state => ({
    ...state,
    invalidCells: [],
    invalidCellsMap: {}
  })),
  setColumns: columns => set(state => ({
    ...state,
    columns
  })),
  setExpandableRows: (expandableRows, defaultExpandedRows) => set(state => ({
    ...state,
    expandableRows,
    hiddenRows: getHiddenRows(expandableRows, defaultExpandedRows)
  })),
  setEditingCell: _ref => {
    let {
      cell,
      isMetaKey = false,
      isControlKey = false,
      editWithValue = ''
    } = _ref;
    set(state => {
      return {
        ...state,
        editingCell: cell,
        isMetaKey,
        isControlKey,
        editWithValue
      };
    });
  },
  setShiftPressed: isShiftPressed => set(state => ({
    ...state,
    isShiftPressed
  })),
  setDisabledRows: disabledRows => set(state => ({
    ...state,
    disabledRows
  })),
  setHiddenRows: hiddenRows => set(state => ({
    ...state,
    hiddenRows
  })),
  setOpenModal: value => set(state => ({
    ...state,
    openedModal: value
  })),
  setRows: rows => set(state => ({
    ...state,
    rows
  })),
  setSelectedCells: cells => set(state => ({
    ...state,
    selectedCells: cells,
    selectedCellsMap: getCellsMap(cells)
  })),
  setSelectedRows: rowIndexes => set(state => ({
    ...state,
    selectedRows: rowIndexes
  })),
  setTableRef: ref => set(state => ({
    ...state,
    tableRef: ref
  })),
  setAutoFillActive: isActive => set(state => ({
    ...state,
    isAutoFillActive: isActive
  })),
  setSelectingActive: isActive => set(state => ({
    ...state,
    isSelectingActive: isActive
  })),
  setBlockFillOut: isBlock => set(state => ({
    ...state,
    isBlockedFillOut: isBlock
  }))
}));
export const useWorksheetStore = () => {
  const store = useContext(WorksheetContext);
  if (!store) {
    throw new Error('Worksheet store value is null');
  }
  return {
    store,
    useStore
  };
};