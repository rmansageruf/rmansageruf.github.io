import { theme as defaultTheme } from '@bigcommerce/big-design-theme';
import styled, { css, keyframes } from 'styled-components';
import { CIRCLE_CIRCUMFERENCES, CIRCLE_DIMENSIONS, CIRCLE_STROKE_WIDTHS } from './constants';
export const StyledProgressCircle = /*#__PURE__*/styled.svg.withConfig({
  displayName: "styled__StyledProgressCircle",
  componentId: "sc-n3drku-0"
})(["", ""], _ref => {
  let {
    size,
    theme
  } = _ref;
  return css(["height:", ";width:", ";"], theme.helpers.remCalc(getDimensions(size)), theme.helpers.remCalc(getDimensions(size)));
});
export const StyledCircle = /*#__PURE__*/styled.circle.attrs(_ref2 => {
  let {
    size,
    theme
  } = _ref2;
  return {
    // rem not usable for circle svg cx, cy, and r values in Safari 14
    cx: theme.helpers.emCalc(getDimensions(size) / 2),
    cy: theme.helpers.emCalc(getDimensions(size) / 2),
    r: theme.helpers.emCalc(getDimensions(size) / 2 - getStrokeWidth(size) / 2)
  };
}).withConfig({
  displayName: "styled__StyledCircle",
  componentId: "sc-n3drku-1"
})(["fill:transparent;stroke-width:", ";stroke:", ";"], _ref3 => {
  let {
    size,
    theme
  } = _ref3;
  return theme.helpers.remCalc(getStrokeWidth(size));
}, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.colors.secondary20;
});
export const StyledCircleFiller = /*#__PURE__*/styled(StyledCircle).withConfig({
  displayName: "styled__StyledCircleFiller",
  componentId: "sc-n3drku-2"
})(["stroke-dasharray:", ";stroke:", ";transform-origin:50% 50%;", ";"], _ref5 => {
  let {
    size
  } = _ref5;
  return getStrokeDashArray(size);
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return theme.colors.primary;
}, _ref7 => {
  let {
    percent,
    size
  } = _ref7;
  return typeof percent === 'number' ? css(["stroke-dashoffset:", ";transform:rotate(-90deg);transition:stroke-dashoffset 0.35s;"], typeof percent === 'number' ? `${fillLength(percent, size)}` : 0) : css(["animation:", " 1s ease-out infinite;stroke-dashoffset:", ";transform:rotate(-90deg);transition:stroke-dashoffset 0.35s;"], spin(size), fillLength(0, size));
});
export const StyledText = /*#__PURE__*/styled.text.attrs(() => ({
  dominantBaseline: 'central',
  textAnchor: 'middle',
  x: '50%',
  y: '50%'
})).withConfig({
  displayName: "styled__StyledText",
  componentId: "sc-n3drku-3"
})(["font-size:", ";font-weight:", ";"], _ref8 => {
  let {
    size,
    theme
  } = _ref8;
  return size === 'large' ? theme.typography.fontSize.large : theme.typography.fontSize.small;
}, _ref9 => {
  let {
    size,
    theme
  } = _ref9;
  return size === 'large' ? theme.typography.fontWeight.semiBold : theme.typography.fontWeight.regular;
});
const spin = size => keyframes(["0%{stroke-dashoffset:", ";transform:rotate(-90deg);}50%{stroke-dashoffset:", ";}100%{stroke-dashoffset:", ";transform:rotate(270deg);}"], fillLength(0, size) * -1, fillLength(37.5, size) * -1, fillLength(0, size) * -1);
function getDimensions() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'medium';
  return CIRCLE_DIMENSIONS[size];
}
function getStrokeDashArray() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'medium';
  return `${CIRCLE_CIRCUMFERENCES[size]} ${CIRCLE_CIRCUMFERENCES[size]}`;
}
function getStrokeWidth() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'medium';
  return CIRCLE_STROKE_WIDTHS[size];
}
function fillLength(percent) {
  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'medium';
  return CIRCLE_CIRCUMFERENCES[size] - percent / 100 * CIRCLE_CIRCUMFERENCES[size];
}
StyledProgressCircle.defaultProps = {
  theme: defaultTheme
};
StyledCircle.defaultProps = {
  theme: defaultTheme
};
StyledCircleFiller.defaultProps = {
  theme: defaultTheme
};
StyledText.defaultProps = {
  theme: defaultTheme
};