import { useEffect, useState } from 'react';
import { useEventCallback } from '../../../../hooks';
import { getTotalSelectedChildRows, selectChildRow, selectParentRow } from './helpers';
export const useSelectable = selectable => {
  const isSelectable = Boolean(selectable);
  const isChildrenRowsSelectable = selectable?.isChildrenRowsSelectable ?? false;
  const [selectedItems, setSelectedItems] = useState({});
  const [selectedParentRowsCrossPages, setSelectedParentRowsCrossPages] = useState(() => {
    const initialSelectedParentRows = selectable?.initialSelectedParentRows ?? [];
    if (initialSelectedParentRows.length) {
      const initialSelectedParentRowsCrossPages = new Set(initialSelectedParentRows);
      return new Set(initialSelectedParentRowsCrossPages);
    }
    return new Set();
  });
  const onItemSelectEventCallback = useEventCallback(_ref => {
    let {
      isParentRow,
      parentRowId,
      childRowId,
      childrenRowsIds
    } = _ref;
    if (!selectable) {
      return;
    }
    const {
      onSelectionChange
    } = selectable;
    if (isParentRow) {
      const newSelectedItems = selectParentRow({
        selectedItems,
        setSelectedParentRowsCrossPages,
        parentRowId,
        childRowId,
        isChildrenRowsSelectable,
        childrenRowsIds
      });
      onSelectionChange(newSelectedItems);
    } else {
      const totalSelectedChildRows = getTotalSelectedChildRows({
        selectedItems,
        parentRowId,
        setSelectedParentRowsCrossPages,
        childRowId,
        childrenRowsIds
      });
      const isTheOnlySelectedChildRow = totalSelectedChildRows === 1;
      const newSelectedItems = selectChildRow({
        isTheOnlySelectedChildRow,
        selectedItems,
        parentRowId,
        setSelectedParentRowsCrossPages,
        childRowId,
        isChildrenRowsSelectable,
        childrenRowsIds
      });
      onSelectionChange(newSelectedItems);
    }
  });
  useEffect(() => {
    if (selectable?.selectedItems) {
      setSelectedItems({
        ...selectable.selectedItems
      });
    }
  }, [selectable?.selectedItems]);
  return {
    isSelectable,
    onItemSelect: isSelectable ? onItemSelectEventCallback : undefined,
    selectedItems,
    isChildrenRowsSelectable,
    selectedParentRowsCrossPages,
    setSelectedParentRowsCrossPages
  };
};