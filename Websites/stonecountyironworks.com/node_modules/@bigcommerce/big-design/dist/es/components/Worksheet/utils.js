export const mergeCells = (oldCells, newCells) => newCells.reduce((accum, newCell) => {
  const index = oldCells.findIndex(oldCell => oldCell.rowIndex === newCell.rowIndex && oldCell.columnIndex === newCell.columnIndex);
  if (index > -1) {
    accum[index] = newCell;
    return accum;
  }
  return accum.concat(newCell);
}, [...oldCells] // Note: returns a new array every time
);

export const deleteCells = (oldCells, newCells) => oldCells.filter(oldCell => !newCells.find(newCell => newCell.columnIndex === oldCell.columnIndex && newCell.rowIndex === oldCell.rowIndex));
export const editedRows = (editedCells, rows) => editedCells.reduce((accum, _ref) => {
  let {
    rowIndex
  } = _ref;
  const row = rows[rowIndex];

  // Check to see if the row already exists in accum
  if (accum.find(editedRow => editedRow === row)) {
    return accum;
  }

  // Only append new rows
  return [...accum, row];
}, []);
export const invalidRows = (invalidCells, rows) => {
  const mapObj = new Map();

  // Create Map with each row and append errors per row
  invalidCells.forEach(_ref2 => {
    let {
      rowIndex,
      hash
    } = _ref2;
    const row = rows[rowIndex];
    if (mapObj.has(row)) {
      const errors = mapObj.get(row);
      mapObj.set(row, new Set([...errors, hash]));
    } else {
      mapObj.set(row, new Set([hash]));
    }
  });
  return Array.from(mapObj).map(_ref3 => {
    let [item, errors] = _ref3;
    return {
      item,
      errors: Array.from(errors)
    };
  });
};
export const getHiddenRows = function (expandableRows) {
  let defaultExpandedRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return Object.entries(expandableRows).reduce((accum, _ref4) => {
    let [key, value] = _ref4;
    return defaultExpandedRows.map(String).includes(key) ? accum : [...accum, ...value];
  }, []);
};
export const getCellIdx = _ref5 => {
  let {
    columnIndex,
    rowIndex
  } = _ref5;
  return `${rowIndex}_${columnIndex}`;
};
export const getCellsMap = cells => cells.reduce((acc, cell) => ({
  ...acc,
  [getCellIdx(cell)]: cell
}), {});