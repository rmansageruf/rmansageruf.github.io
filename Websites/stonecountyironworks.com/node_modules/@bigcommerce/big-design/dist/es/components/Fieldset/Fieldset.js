import React, { isValidElement, memo, useMemo } from 'react';
import { warning } from '../../utils';
import { FieldsetDescription } from './Description';
import { FieldsetLegend } from './Legend';
import { StyledFieldset } from './styled';
export const Fieldset = /*#__PURE__*/memo(_ref => {
  let {
    className,
    legend,
    description,
    children,
    style,
    ...props
  } = _ref;
  const renderedLegend = useMemo(() => {
    if (typeof legend === 'string') {
      return /*#__PURE__*/React.createElement(FieldsetLegend, null, legend);
    }
    if ( /*#__PURE__*/isValidElement(legend) && legend.type === FieldsetLegend) {
      return legend;
    }
    if (!legend) {
      return null;
    }
    warning('legend must be either a string or a FieldsetLegend component.');
  }, [legend]);
  const renderedDescription = useMemo(() => {
    if (typeof description === 'string') {
      return /*#__PURE__*/React.createElement(FieldsetDescription, null, description);
    }
    if ( /*#__PURE__*/isValidElement(description) && description.type === FieldsetDescription) {
      return description;
    }
    if (!description) {
      return null;
    }
    warning('description must be either a string or a FieldsetDescription component.');
  }, [description]);
  return /*#__PURE__*/React.createElement(StyledFieldset, props, renderedLegend, renderedDescription, children);
});