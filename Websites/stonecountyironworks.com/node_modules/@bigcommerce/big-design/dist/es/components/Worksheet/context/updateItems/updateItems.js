import React, { createContext, useCallback, useMemo } from 'react';
import { typedMemo } from '../../../../utils';
import { useWorksheetStore } from '../../hooks';
export const UpdateItemsContext = /*#__PURE__*/createContext(null);
export const UpdateItemsProvider = typedMemo(_ref => {
  let {
    children,
    items
  } = _ref;
  const {
    store,
    useStore
  } = useWorksheetStore();
  const setRows = useStore(store, state => state.setRows);
  const addEditedCells = useStore(store, state => state.addEditedCells);
  const updateItems = useCallback((cells, newValues) => {
    setRows(cells.reduce((accum, cell, index) => {
      const {
        hash,
        rowIndex
      } = cell;

      // Don't change since value is the same
      if (cell.value === newValues[index]) {
        return accum;
      }
      const row = accum[rowIndex];
      const updatedRow = {
        ...row,
        [hash]: newValues[index]
      };
      accum[rowIndex] = updatedRow;
      return accum;
    }, items));
    addEditedCells(cells.reduce((accum, cell, index) => {
      // Don't add since value is the same
      if (cell.value === newValues[index]) {
        return accum;
      }
      return [...accum, {
        ...cell,
        value: newValues[index]
      }];
    }, []));
  }, [addEditedCells, items, setRows]);
  const providerValue = useMemo(() => ({
    updateItems
  }), [updateItems]);
  return /*#__PURE__*/React.createElement(UpdateItemsContext.Provider, {
    value: providerValue
  }, children);
});