import _extends from "@babel/runtime/helpers/esm/extends";
import React, { forwardRef, isValidElement, memo } from 'react';
import { excludePaddingProps } from '../../mixins/paddings/paddings';
import { warning } from '../../utils';
import { Badge } from '../Badge/Badge';
import { Button } from '../Button';
import { Flex } from '../Flex';
import { Text } from '../Typography';
import { StyledH2, StyledPanel } from './styled';
export const RawPanel = /*#__PURE__*/memo(_ref => {
  let {
    forwardedRef,
    ...props
  } = _ref;
  const filteredProps = excludePaddingProps(props);
  const {
    action,
    children,
    description,
    header,
    headerId,
    badge,
    ...rest
  } = filteredProps;
  const renderHeader = () => {
    if (!header && !action) {
      return null;
    }
    if (typeof header !== 'string') {
      return null;
    }
    return /*#__PURE__*/React.createElement(Flex, {
      flexDirection: "row"
    }, Boolean(header) && /*#__PURE__*/React.createElement(StyledH2, {
      id: headerId,
      marginBottom: description ? 'xxSmall' : 'medium'
    }, header, badge && /*#__PURE__*/React.createElement(Badge, _extends({
      marginLeft: "xSmall"
    }, badge))), action && /*#__PURE__*/React.createElement(Button, action, action.text));
  };
  const renderDescription = () => {
    if (!description) {
      return null;
    }
    if (typeof description === 'string') {
      return /*#__PURE__*/React.createElement(Text, {
        color: "secondary60"
      }, description);
    }
    if ( /*#__PURE__*/isValidElement(description)) {
      return description;
    }
    warning('description must be either a string or a ReactNode.');
  };
  return /*#__PURE__*/React.createElement(StyledPanel, _extends({
    marginBottom: "medium"
  }, rest, {
    backgroundColor: "white",
    padding: {
      mobile: 'medium',
      tablet: 'xLarge'
    },
    ref: forwardedRef,
    shadow: "raised"
  }), renderHeader(), renderDescription(), children);
});
export const Panel = /*#__PURE__*/forwardRef((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/React.createElement(RawPanel, _extends({}, props, {
    forwardedRef: ref
  }));
});
Panel.displayName = 'Panel';