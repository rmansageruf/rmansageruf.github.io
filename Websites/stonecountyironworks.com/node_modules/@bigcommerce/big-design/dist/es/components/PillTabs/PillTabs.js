import { CheckIcon, MoreHorizIcon } from '@bigcommerce/big-design-icons';
import React, { createRef, useCallback, useEffect, useMemo, useState } from 'react';
import { useWindowResizeListener } from '../../hooks';
import { Button } from '../Button';
import { Dropdown } from '../Dropdown';
import { Flex } from '../Flex';
import { StyledFlexItem, StyledPillTab } from './styled';
export const PillTabs = _ref => {
  let {
    activePills,
    items,
    onPillClick
  } = _ref;
  const parentRef = /*#__PURE__*/createRef();
  const dropdownRef = /*#__PURE__*/createRef();
  const [isMenuVisible, setIsMenuVisible] = useState(false);
  const [pillsState, setPillsState] = useState(items.map(item => ({
    isVisible: true,
    item,
    ref: /*#__PURE__*/createRef()
  })));
  const hideOverflowedPills = useCallback(() => {
    const parentWidth = parentRef.current?.offsetWidth;
    const dropdownWidth = dropdownRef.current?.offsetWidth;
    if (!parentWidth || !dropdownWidth) {
      return;
    }
    let remainingWidth = parentWidth;
    const newState = pillsState.map(stateObj => {
      const pillWidth = stateObj.ref.current?.offsetWidth;
      if (!pillWidth) {
        return stateObj;
      }
      if (remainingWidth - pillWidth > dropdownWidth) {
        remainingWidth -= pillWidth;
        return {
          ...stateObj,
          isVisible: true
        };
      }
      return {
        ...stateObj,
        isVisible: false
      };
    });
    const visiblePills = pillsState.filter(stateObj => stateObj.isVisible);
    const newVisiblePills = newState.filter(stateObj => stateObj.isVisible);
    if (visiblePills.length !== newVisiblePills.length) {
      setIsMenuVisible(newVisiblePills.length !== items.length);
      setPillsState(newState);
    }
  }, [items, parentRef, dropdownRef, pillsState]);
  const renderedDropdown = useMemo(() => {
    const dropdownItems = pillsState.filter(stateObj => !stateObj.isVisible).map(stateObj => {
      const item = items.find(_ref2 => {
        let {
          title
        } = _ref2;
        return title === stateObj.item.title;
      });
      const isActive = item ? activePills.includes(item.id) : false;
      return {
        content: stateObj.item.title,
        onItemClick: () => onPillClick(stateObj.item.id),
        hash: stateObj.item.title.toLowerCase(),
        icon: isActive ? /*#__PURE__*/React.createElement(CheckIcon, null) : undefined
      };
    });
    return /*#__PURE__*/React.createElement(StyledFlexItem, {
      "data-testid": "pilltabs-dropdown-toggle",
      isVisible: isMenuVisible,
      ref: dropdownRef,
      role: "listitem"
    }, /*#__PURE__*/React.createElement(Dropdown, {
      items: dropdownItems,
      toggle: /*#__PURE__*/React.createElement(Button, {
        iconOnly: /*#__PURE__*/React.createElement(MoreHorizIcon, {
          title: "add"
        }),
        variant: "subtle"
      })
    }));
  }, [items, pillsState, isMenuVisible, dropdownRef, activePills, onPillClick]);
  useEffect(() => {
    const itemIds = items.map(item => item.id);
    const stateIds = pillsState.map(stateItem => stateItem.item.id);

    // The item ids and their order must match exactly with the internal state, if not, the state needs to be synced up
    if (itemIds.join() !== stateIds.join()) {
      const newState = items.map(item => {
        const oldItem = pillsState.find(stateItem => stateItem.item === item);
        if (oldItem) {
          return oldItem;
        }
        return {
          // hideOverflownPills will correct this field if it needs correction
          isVisible: true,
          item,
          ref: /*#__PURE__*/createRef()
        };
      });
      setPillsState(newState);
    }
  }, [items, pillsState]);
  const renderedPills = useMemo(() => items.map((item, index) => {
    const pill = pillsState[index];
    if (!pill) {
      return;
    }
    return /*#__PURE__*/React.createElement(StyledFlexItem, {
      "data-testid": `pilltabs-pill-${index}`,
      isVisible: pill.isVisible,
      key: index,
      ref: pill.ref,
      role: "listitem"
    }, /*#__PURE__*/React.createElement(StyledPillTab, {
      disabled: !pill.isVisible,
      isActive: activePills.includes(item.id),
      marginRight: "xSmall",
      onClick: () => onPillClick(item.id),
      variant: "subtle"
    }, item.title));
  }), [items, pillsState, activePills, onPillClick]);
  useEffect(() => {
    hideOverflowedPills();
  }, [items, parentRef, pillsState, hideOverflowedPills]);
  useWindowResizeListener(() => {
    hideOverflowedPills();
  });
  return items.length > 0 ? /*#__PURE__*/React.createElement(Flex, {
    "data-testid": "pilltabs-wrapper",
    flexDirection: "row",
    flexWrap: "nowrap",
    ref: parentRef,
    role: "list"
  }, renderedPills, renderedDropdown) : null;
};
PillTabs.displayName = 'Pill Tabs';