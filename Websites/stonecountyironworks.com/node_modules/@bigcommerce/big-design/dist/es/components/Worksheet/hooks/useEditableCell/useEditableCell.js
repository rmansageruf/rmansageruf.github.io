import { useCallback, useMemo } from 'react';
import { useTableFocus } from '../useTableFocus';
import { useUpdateItems } from '../useUpdateItems';
import { useWorksheetStore } from '../useWorksheetStore';
export const useEditableCell = cell => {
  const {
    store,
    useStore
  } = useWorksheetStore();
  const setEditingCell = useStore(store, state => state.setEditingCell);
  const {
    updateItems
  } = useUpdateItems();
  const {
    focusTable
  } = useTableFocus();
  const isEditing = useStore(store, useMemo(() => _ref => {
    let {
      editingCell
    } = _ref;
    return editingCell !== null && editingCell.columnIndex === cell.columnIndex && editingCell.rowIndex === cell.rowIndex;
  }, [cell]));
  const restoreFocus = useCallback(() => {
    setEditingCell({
      cell: null
    });
    focusTable();
  }, [focusTable, setEditingCell]);
  const handleDoubleClick = useCallback(() => {
    if (!cell.disabled) {
      setEditingCell({
        cell
      });
    }
  }, [cell, setEditingCell]);
  const handleBlur = useCallback((event, cell) => {
    const isNumberCell = cell?.type === 'number';
    const isTextCell = cell?.type === 'text';
    if (isNumberCell || isTextCell) {
      updateItems([cell], [isNumberCell ? Number(event?.target.value) : event?.target.value]);
    }
    restoreFocus();
  }, [restoreFocus, updateItems]);
  const handleChange = useCallback(newValue => {
    updateItems([cell], [newValue]);
    restoreFocus();
  }, [cell, restoreFocus, updateItems]);
  const handleKeyDown = useCallback((event, newValue) => {
    const key = event.key;
    switch (key) {
      case 'Enter':
      case 'Tab':
        event.preventDefault();

        // Only call updateItems if cells have new values
        if (cell.value !== newValue) {
          updateItems([cell], [newValue]);
        }
        restoreFocus();
        break;
      case 'Escape':
        event.preventDefault();
        restoreFocus();
        break;
    }
  }, [cell, restoreFocus, updateItems]);
  return useMemo(() => ({
    handleBlur,
    handleChange,
    handleDoubleClick,
    handleKeyDown,
    isEditing
  }), [handleBlur, handleChange, handleDoubleClick, handleKeyDown, isEditing]);
};