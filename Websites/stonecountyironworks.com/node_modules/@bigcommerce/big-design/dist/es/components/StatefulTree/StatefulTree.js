import React from 'react';
import { typedMemo } from '../../utils';
import { Tree, useNodeMap, useTreeKeyEvents } from '../Tree';
import { useExpandable, useFocusable, useSelectable, useVisibleNodes } from './hooks';
const InternalStatefulTree = _ref => {
  let {
    nodes = [],
    defaultExpanded,
    defaultSelected,
    disabledNodes = [],
    iconless,
    onNodeClick,
    onExpandedChange,
    onSelectionChange,
    selectable: type
  } = _ref;
  const {
    focusedNode,
    onFocus
  } = useFocusable({
    nodes,
    type,
    defaultSelected
  });
  const {
    expandedNodes,
    onToggle
  } = useExpandable({
    defaultExpanded,
    onExpandedChange
  });
  const {
    selectedNodes,
    onSelect
  } = useSelectable({
    defaultSelected,
    disabledNodes,
    nodes,
    onSelectionChange,
    type
  });
  const nodeMap = useNodeMap({
    nodes
  });
  const {
    visibleNodes
  } = useVisibleNodes({
    expandedNodes,
    nodeMap
  });
  const onKeyDown = useTreeKeyEvents({
    onFocus,
    onSelect,
    onToggle,
    nodeMap,
    visibleNodes
  });
  return /*#__PURE__*/React.createElement(Tree, {
    disabledNodes: disabledNodes,
    expandable: {
      expandedNodes,
      onToggle
    },
    focusable: {
      focusedNode,
      onFocus
    },
    iconless: iconless,
    nodes: nodes,
    onKeyDown: onKeyDown,
    onNodeClick: onNodeClick,
    selectable: {
      selectedNodes,
      onSelect,
      type
    }
  });
};
export const StatefulTree = typedMemo(InternalStatefulTree);