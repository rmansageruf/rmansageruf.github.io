import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { typedMemo } from '../../../utils';
import { Modal } from '../../Modal';
import { useTableFocus, useUpdateItems, useWorksheetStore } from '../hooks';
const InternalWorksheetModal = _ref => {
  let {
    column
  } = _ref;
  const {
    config,
    hash
  } = column;
  const {
    header,
    render,
    saveActionText = 'Save',
    cancelActionText = 'Cancel'
  } = config;
  const {
    store,
    useStore
  } = useWorksheetStore();
  const isModalOpen = useStore(store, useMemo(() => state => state.openedModal === hash, [hash]));
  const selectedCell = useStore(store, useMemo(() => state => state.selectedCells[0], []));
  const setOpenModal = useStore(store, state => state.setOpenModal);
  const setEditingCell = useStore(store, state => state.setEditingCell);
  const {
    focusTable
  } = useTableFocus();
  const {
    updateItems
  } = useUpdateItems();
  const [newValue, setNewValue] = useState(null);
  useEffect(() => {
    if (selectedCell) {
      setNewValue(selectedCell.value);
    }
  }, [selectedCell]);
  const handleClose = useCallback(() => {
    setOpenModal(null);
    setEditingCell({
      cell: null
    });
    focusTable();
  }, [focusTable, setEditingCell, setOpenModal]);
  const handleSave = useCallback(() => {
    if (selectedCell && newValue !== null && newValue !== selectedCell.value) {
      updateItems([selectedCell], [newValue]);
    }
    handleClose();
  }, [handleClose, newValue, selectedCell, updateItems]);
  const renderedContent = useMemo(() => {
    const onChange = newValue => {
      if (newValue !== undefined) {
        setNewValue(newValue);
      }
    };
    return selectedCell ? render(selectedCell.value, onChange) : null;
  }, [selectedCell, render]);
  return /*#__PURE__*/React.createElement(Modal, {
    actions: [{
      text: cancelActionText,
      variant: 'subtle',
      onClick: handleClose
    }, {
      text: saveActionText,
      onClick: handleSave
    }],
    closeOnClickOutside: false,
    closeOnEscKey: true,
    header: header,
    isOpen: isModalOpen,
    onClose: handleClose
  }, renderedContent);
};
export const WorksheetModal = typedMemo(InternalWorksheetModal);