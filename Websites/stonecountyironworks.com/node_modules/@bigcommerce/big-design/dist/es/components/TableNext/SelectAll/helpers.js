import { getPagedIndex } from '../helpers';
export function getChildrenRows(parentRow, getChildren) {
  const isGetChildrenUsed = getChildren !== undefined;
  if (!isGetChildrenUsed) {
    return [];
  }
  return getChildren(parentRow) ?? [];
}
export function areAllInPageSelected(_ref) {
  let {
    items,
    selectedItems,
    getChildren,
    pagination,
    getRowId,
    isChildrenRowsSelectable
  } = _ref;
  if (items.length === 0) {
    return false;
  }
  return items.every((parentRow, parentRowIndex) => {
    const pagedIndex = getPagedIndex(parentRowIndex, pagination);
    const childrenRows = isChildrenRowsSelectable ? getChildrenRows(parentRow, getChildren) : [];
    const childrenRowsIds = childrenRows.map((childRow, childRowIndex) => {
      return getRowId(childRow, pagedIndex, childRowIndex);
    });
    const parentRowId = getRowId(parentRow, pagedIndex);
    if (childrenRowsIds.length === 0) {
      return selectedItems[parentRowId];
    }
    return areAllParentsAndChildrenSelected(selectedItems, childrenRowsIds, parentRowId);
  });
}
export function areSomeInPageSelected(_ref2) {
  let {
    items,
    selectedItems,
    getChildren,
    pagination,
    getRowId,
    isChildrenRowsSelectable
  } = _ref2;
  if (items.length <= 0) {
    return false;
  }
  return items.some((parentRow, parentRowIndex) => {
    const pagedIndex = getPagedIndex(parentRowIndex, pagination);
    const childrenRows = isChildrenRowsSelectable ? getChildrenRows(parentRow, getChildren) : [];
    const childrenRowsIds = childrenRows.map((childRow, childRowIndex) => {
      return getRowId(childRow, pagedIndex, childRowIndex);
    });
    const parentRowId = getRowId(parentRow, pagedIndex);
    if (childrenRowsIds.length === 0) {
      return selectedItems[parentRowId] !== undefined;
    }
    return areSomeParentsAndChildrenSelected(selectedItems, childrenRowsIds, parentRowId);
  });
}
function areAllParentsAndChildrenSelected(selectedItems, childrenRowsIds, parentRowId) {
  const allChildrenRowsSelected = childrenRowsIds.every(childRowId => {
    return selectedItems[childRowId];
  });
  return selectedItems[parentRowId] !== undefined && allChildrenRowsSelected;
}
function areSomeParentsAndChildrenSelected(selectedItems, childrenRowsIds, parentRowId) {
  const someChildrenRowsInPageSelected = childrenRowsIds.some(childRowId => {
    return selectedItems[childRowId] !== undefined;
  });
  return selectedItems[parentRowId] !== undefined && someChildrenRowsInPageSelected;
}
function deselectAllOnCurrentPage(params) {
  const {
    items,
    selectedItems,
    pagination,
    getRowId,
    getChildren,
    setSelectedParentRowsCrossPages,
    isChildrenRowsSelectable
  } = params;
  const newSelectedItems = {
    ...selectedItems
  };
  items.forEach((item, index) => {
    const pagedIndex = getPagedIndex(index, pagination);
    const parentRowId = getRowId(item, pagedIndex);
    setSelectedParentRowsCrossPages(prevSelectedParentRowsCrossPages => {
      const newSet = new Set([...prevSelectedParentRowsCrossPages]);
      newSet.delete(parentRowId);
      return newSet;
    });
    delete newSelectedItems[parentRowId];
    const childrenRows = isChildrenRowsSelectable ? getChildrenRows(item, getChildren) : [];
    childrenRows.forEach((childRow, childRowIndex) => {
      const childRowId = getRowId(childRow, pagedIndex, childRowIndex);
      delete newSelectedItems[childRowId];
    });
  });
  return newSelectedItems;
}
function selectAllOnCurrentPage(params) {
  const {
    items,
    selectedItems,
    getChildren,
    pagination,
    getRowId,
    setSelectedParentRowsCrossPages,
    isChildrenRowsSelectable
  } = params;
  const newSelectedItems = items.map((parentRow, parentRowIndex) => {
    const pagedIndex = getPagedIndex(parentRowIndex, pagination);
    const childrenRows = isChildrenRowsSelectable ? getChildrenRows(parentRow, getChildren) : [];
    const parentRowId = getRowId(parentRow, pagedIndex);
    setSelectedParentRowsCrossPages(prevSelectedParentRowsCrossPages => {
      const newSet = new Set([...prevSelectedParentRowsCrossPages]);
      newSet.add(parentRowId);
      return newSet;
    });
    if (childrenRows.length) {
      const newSelectedChildrenRows = childrenRows.map((child, childRowIndex) => {
        const childRowId = getRowId(child, pagedIndex, childRowIndex);
        return [`${childRowId}`, true];
      });
      return [[`${parentRowId}`, true], ...newSelectedChildrenRows];
    }
    return [[`${parentRowId}`, true]];
  });
  return {
    ...selectedItems,
    ...Object.fromEntries(newSelectedItems.flat())
  };
}
export function getSelectAllState(params) {
  if (areAllInPageSelected(params)) {
    return deselectAllOnCurrentPage(params);
  }
  return selectAllOnCurrentPage(params);
}