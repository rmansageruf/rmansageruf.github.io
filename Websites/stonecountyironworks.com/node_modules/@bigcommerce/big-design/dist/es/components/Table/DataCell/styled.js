import { theme as defaultTheme } from '@bigcommerce/big-design-theme';
import styled, { css } from 'styled-components';
import { withTableColumnDisplay } from '../mixins';
// TODO: Use PaddingProps
export const StyledTableDataCell = /*#__PURE__*/styled.td.withConfig({
  displayName: "styled__StyledTableDataCell",
  componentId: "sc-16y6nzi-0"
})(["", " background-color:", ";box-sizing:border-box;color:", ";font-size:", ";padding:", ";&:first-of-type{padding-left:", ";}&:last-of-type{padding-right:", ";}", " ", ";", ";", ";"], withTableColumnDisplay(), _ref => {
  let {
    theme
  } = _ref;
  return theme.colors.white;
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.colors.secondary70;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.typography.fontSize.medium;
}, _ref4 => {
  let {
    theme,
    withPadding
  } = _ref4;
  return withPadding ? theme.spacing.small : 0;
}, _ref5 => {
  let {
    theme,
    withPadding
  } = _ref5;
  return withPadding ? theme.spacing.xLarge : 0;
}, _ref6 => {
  let {
    theme,
    withPadding
  } = _ref6;
  return withPadding ? theme.spacing.xLarge : 0;
}, _ref7 => {
  let {
    theme,
    withBorder
  } = _ref7;
  return withBorder && css(["border-bottom:", ";"], theme.border.box);
}, _ref8 => {
  let {
    align
  } = _ref8;
  return align && css(["text-align:", ";"], align);
}, _ref9 => {
  let {
    verticalAlign
  } = _ref9;
  return verticalAlign && css(["vertical-align:", ";"], verticalAlign);
}, _ref10 => {
  let {
    width
  } = _ref10;
  return width !== undefined && css(["width:", ";"], typeof width === 'string' ? width : `${width}px`);
});
export const StyledTableDataCheckbox = /*#__PURE__*/styled(StyledTableDataCell).withConfig({
  displayName: "styled__StyledTableDataCheckbox",
  componentId: "sc-16y6nzi-1"
})(["", " background-color:", ";padding:", ";&:first-of-type{padding-left:", ";}&:last-of-type{padding-right:", ";}", ";"], withTableColumnDisplay(), _ref11 => {
  let {
    theme
  } = _ref11;
  return theme.colors.white;
}, _ref12 => {
  let {
    theme
  } = _ref12;
  return `0 ${theme.spacing.small}`;
}, _ref13 => {
  let {
    theme
  } = _ref13;
  return theme.spacing.xLarge;
}, _ref14 => {
  let {
    theme
  } = _ref14;
  return theme.spacing.xLarge;
}, props => props.isCheckbox && css(["width:", ";white-space:nowrap;"], _ref15 => {
  let {
    theme
  } = _ref15;
  return theme.helpers.addValues(theme.spacing.xLarge, theme.spacing.small);
}));
StyledTableDataCell.defaultProps = {
  theme: defaultTheme
};
StyledTableDataCheckbox.defaultProps = {
  theme: defaultTheme
};