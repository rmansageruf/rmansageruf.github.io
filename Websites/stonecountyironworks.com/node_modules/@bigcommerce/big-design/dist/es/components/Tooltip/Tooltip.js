import React, { cloneElement, memo, useEffect, useMemo, useState } from 'react';
import { createPortal } from 'react-dom';
import { Manager, Popper, Reference } from 'react-popper';
import { Small } from '../Typography';
import { StyledTooltip } from './styled';
export const Tooltip = /*#__PURE__*/memo(_ref => {
  let {
    children,
    modifiers,
    trigger,
    id,
    ...props
  } = _ref;
  const [isVisible, setIsVisible] = useState(false);
  const [tooltipContainer, setTooltipContainer] = useState(null);
  const tooltipModifiers = useMemo(() => {
    const mods = modifiers || [];
    return [{
      name: 'eventListeners',
      options: {
        scroll: isVisible,
        resize: isVisible
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 4]
      }
    }, ...mods];
  }, [isVisible, modifiers]);
  useEffect(() => {
    const container = document.createElement('div');
    document.body.appendChild(container);
    setTooltipContainer(container);
  }, []);
  useEffect(() => {
    return () => {
      if (tooltipContainer) {
        document.body.removeChild(tooltipContainer);
      }
    };
  }, [tooltipContainer]);
  const renderContent = () => {
    return typeof children === 'string' ? /*#__PURE__*/React.createElement(Small, {
      color: "white"
    }, children) : children;
  };
  const hideTooltip = () => {
    setIsVisible(false);
  };
  const showTooltip = () => {
    setIsVisible(true);
  };
  const onKeyDown = event => {
    if (event.key === 'Escape') {
      setIsVisible(false);
    }
  };
  return /*#__PURE__*/React.createElement(Manager, null, /*#__PURE__*/React.createElement(Reference, null, _ref2 => {
    let {
      ref
    } = _ref2;
    return /*#__PURE__*/cloneElement(trigger, {
      ref,
      onBlur: hideTooltip,
      onFocus: showTooltip,
      onKeyDown,
      onMouseEnter: showTooltip,
      onMouseLeave: hideTooltip
    });
  }), tooltipContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Popper, {
    modifiers: tooltipModifiers,
    placement: props.placement || 'top'
  }, _ref3 => {
    let {
      placement,
      ref,
      style
    } = _ref3;
    return isVisible && /*#__PURE__*/React.createElement(StyledTooltip, {
      "data-placement": placement,
      id: id,
      ref: ref,
      style: style
    }, renderContent());
  }), tooltipContainer) : null);
});