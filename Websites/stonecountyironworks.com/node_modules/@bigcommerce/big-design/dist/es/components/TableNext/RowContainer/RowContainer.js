import _extends from "@babel/runtime/helpers/esm/extends";
import React, { forwardRef } from 'react';
import { typedMemo } from '../../../utils';
import { StyleableButton } from '../../Button/Button';
import { DataCell } from '../DataCell';
import { Row } from '../Row';
import { calculateColSpan } from './helpers';
const InternalRowContainer = _ref => {
  let {
    isDragging,
    columns,
    expandedRows,
    forwardedRef,
    headerCellWidths,
    isExpandable = false,
    isSelectable = false,
    item,
    getLoadMoreAction,
    parentRowIndex,
    showDragIcon,
    getChildren,
    getItemKey,
    onItemSelect,
    onExpandedRow,
    isChildrenRowsSelectable = false,
    selectedItems,
    getRowId = () => '',
    ...rest
  } = _ref;
  const parentRowId = getRowId(item, parentRowIndex);
  const isParentRowSelected = selectedItems[parentRowId] !== undefined;
  const isExpanded = expandedRows[parentRowId] !== undefined;
  const childrenRows = getChildren ? getChildren?.(item) : [];
  const isDraggable = showDragIcon === true;
  const loadMoreAction = getLoadMoreAction?.(parentRowId);
  const childrenRowsIds = childrenRows?.map((childRow, childRowIndex) => {
    return getRowId(childRow, parentRowIndex, childRowIndex);
  }) ?? [];
  const onParentRowSelect = () => {
    if (onItemSelect) {
      onItemSelect({
        isParentRow: true,
        parentRowId,
        childRowId: undefined,
        childrenRowsIds
      });
    }
  };
  const onExpandedRowChange = () => {
    if (onExpandedRow) {
      onExpandedRow(parentRowId);
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, _extends({
    childrenRowsIds: childrenRowsIds,
    columns: columns,
    headerCellWidths: headerCellWidths,
    isChildrenRowsSelectable: isChildrenRowsSelectable,
    isDraggable: isDraggable,
    isDragging: isDragging,
    isExpandable: isExpandable,
    isExpanded: isExpanded,
    isParentRow: true,
    isSelectable: isSelectable,
    isSelected: isParentRowSelected,
    item: item,
    onExpandedRow: onExpandedRowChange,
    onItemSelect: onParentRowSelect,
    parentRowId: parentRowId,
    ref: forwardedRef,
    selectedItems: selectedItems,
    showDragIcon: showDragIcon
  }, rest)), childrenRows && isExpanded && childrenRows?.map((childRow, childRowIndex) => {
    const key = getItemKey(childRow, childRowIndex);
    const childRowId = getRowId(childRow, parentRowIndex, childRowIndex);
    const isChildRowSelected = selectedItems[childRowId] !== undefined;
    const onChilRowSelect = () => {
      if (onItemSelect) {
        onItemSelect({
          isParentRow: false,
          parentRowId,
          childRowId,
          childrenRowsIds
        });
      }
    };
    return /*#__PURE__*/React.createElement(Row, {
      childRowId: childRowId,
      childrenRowsIds: childrenRowsIds,
      columns: columns,
      headerCellWidths: headerCellWidths,
      isChildrenRowsSelectable: isChildrenRowsSelectable,
      isDraggable: isDraggable,
      isDragging: false,
      isExpandable: isExpandable,
      isParentRow: false,
      isSelectable: isSelectable // for rendering extra cells
      ,
      isSelected: isChildRowSelected,
      item: childRow,
      key: key,
      onItemSelect: onChilRowSelect,
      parentRowId: parentRowId,
      selectedItems: selectedItems,
      showDragIcon: showDragIcon
    });
  }), isExpanded && childrenRows !== undefined && loadMoreAction && /*#__PURE__*/React.createElement("tr", {
    key: `extra-helper-row-${parentRowIndex}`
  }, /*#__PURE__*/React.createElement(DataCell, {
    colSpan: calculateColSpan({
      columns,
      isExpandable,
      isDraggable,
      isSelectable
    })
  }, /*#__PURE__*/React.createElement(StyleableButton, {
    isLoading: loadMoreAction.isLoading,
    onClick: e => loadMoreAction.onClick(e, parentRowIndex),
    style: {
      width: '100%'
    },
    variant: "subtle"
  }, loadMoreAction.text))));
};
export const RowContainer = typedMemo( /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InternalRowContainer, _extends({}, props, {
  forwardedRef: ref
}))));