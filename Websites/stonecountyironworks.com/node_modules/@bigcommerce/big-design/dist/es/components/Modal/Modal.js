import _extends from "@babel/runtime/helpers/esm/extends";
import { CloseIcon } from '@bigcommerce/big-design-icons';
import { createFocusTrap } from 'focus-trap';
import React, { useEffect, useId, useMemo, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { typedMemo } from '../../utils';
import { Button } from '../Button';
import { MessagingButton } from '../Button/private';
import { H2 } from '../Typography';
import { StyledModal, StyledModalActions, StyledModalBody, StyledModalClose, StyledModalContent, StyledModalHeader } from './styled';
export const Modal = typedMemo(props => {
  const [modalContainer, setModalContainer] = useState(null);
  useEffect(() => {
    const container = document.createElement('div');
    document.body.appendChild(container);
    setModalContainer(container);
  }, []);
  useEffect(() => {
    return () => {
      if (modalContainer) {
        document.body.removeChild(modalContainer);
      }
    };
  }, [modalContainer]);
  return props.isOpen && modalContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(InternalModal, props), modalContainer) : null;
});
const InternalModal = _ref => {
  let {
    actions,
    backdrop = true,
    children,
    closeOnClickOutside = false,
    closeOnEscKey = true,
    header,
    onClose = () => null,
    variant = 'modal'
  } = _ref;
  const initialBodyOverflowYRef = useRef('');
  const internalTrap = useRef(null);
  const headerUniqueId = useId();
  const [modalRef, setModalRef] = useState(null);
  const onClickAway = event => {
    if (closeOnClickOutside && modalRef === event.target) {
      onClose();
    }
  };
  const onKeyDown = event => {
    if (closeOnEscKey && event.key === 'Escape') {
      onClose();
    }
  };

  // Disable scroll on body when modal is open
  useEffect(() => {
    initialBodyOverflowYRef.current = document.body.style.overflowY || '';
    document.body.style.overflowY = 'hidden';
    return () => {
      document.body.style.overflowY = initialBodyOverflowYRef.current;
    };
  }, []);

  // Setup focus-trap
  useEffect(() => {
    if (modalRef && internalTrap.current === null) {
      internalTrap.current = createFocusTrap(modalRef, {
        fallbackFocus: modalRef
      });
      internalTrap.current.activate();
    }
    return () => {
      internalTrap.current?.deactivate();
    };
  }, [internalTrap, modalRef]);
  const renderedClose = useMemo(() => variant === 'modal' && /*#__PURE__*/React.createElement(StyledModalClose, null, /*#__PURE__*/React.createElement(MessagingButton, {
    iconOnly: /*#__PURE__*/React.createElement(CloseIcon, {
      title: "Close"
    }),
    onClick: onClose
  })), [onClose, variant]);
  const renderedHeader = useMemo(() => header && typeof header === 'string' && /*#__PURE__*/React.createElement(StyledModalHeader, {
    id: headerUniqueId
  }, /*#__PURE__*/React.createElement(H2, {
    margin: "none"
  }, header)), [header, headerUniqueId]);
  const renderedActions = useMemo(() => Array.isArray(actions) && /*#__PURE__*/React.createElement(StyledModalActions, {
    justifyContent: "flex-end"
  }, actions.map((_ref2, index) => {
    let {
      text,
      onClick,
      ...props
    } = _ref2;
    return /*#__PURE__*/React.createElement(Button, _extends({
      key: index
    }, props, {
      onClick: event => {
        internalTrap.current?.deactivate();
        if (typeof onClick === 'function') {
          onClick(event);
        }
      }
    }), text);
  })), [actions]);
  return /*#__PURE__*/React.createElement(StyledModal, {
    backdrop: backdrop,
    onClick: onClickAway,
    onKeyDown: onKeyDown,
    ref: setModalRef,
    tabIndex: -1,
    variant: variant
  }, /*#__PURE__*/React.createElement(StyledModalContent, {
    "aria-labelledby": headerUniqueId,
    flexDirection: "column",
    variant: variant
  }, renderedClose, renderedHeader, /*#__PURE__*/React.createElement(StyledModalBody, null, children), renderedActions));
};