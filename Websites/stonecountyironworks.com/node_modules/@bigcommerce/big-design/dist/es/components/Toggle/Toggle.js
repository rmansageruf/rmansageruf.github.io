import React, { cloneElement, isValidElement, useId, useMemo } from 'react';
import { Box, FormControlLabel } from '@bigcommerce/big-design';
import { typedMemo, warning } from '../../utils';
import { StyledButton } from './styled';
export const Toggle = typedMemo(_ref => {
  let {
    value: activeValue,
    disabled,
    items,
    label,
    labelId,
    localization,
    onChange,
    ...props
  } = _ref;
  const uniqueId = useId();
  const id = props.id ? props.id : uniqueId;
  const handleClick = itemId => e => {
    e.preventDefault();
    return onChange(itemId);
  };
  const renderedLabel = useMemo(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/React.createElement(FormControlLabel, {
        htmlFor: id,
        id: labelId,
        localization: localization
      }, label);
    }
    if ( /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {
      return /*#__PURE__*/cloneElement(label, {
        id: labelId,
        htmlFor: id
      });
    }
    warning('label must be either a string or a FormControlLabel component.');
  }, [id, label, labelId, localization]);
  return /*#__PURE__*/React.createElement("div", null, renderedLabel, /*#__PURE__*/React.createElement(Box, {
    "aria-labelledby": labelId,
    display: "flex",
    id: id,
    marginBottom: "medium",
    role: "group"
  }, items.map((_ref2, idx) => {
    let {
      value: itemId,
      label,
      icon
    } = _ref2;
    return /*#__PURE__*/React.createElement(StyledButton, {
      "aria-checked": itemId === activeValue,
      disabled: disabled,
      isActive: itemId === activeValue,
      isIconType: !!icon,
      key: idx,
      onClick: handleClick(itemId),
      role: "switch"
    }, icon || label);
  })));
});