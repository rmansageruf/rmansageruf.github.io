import { useStore } from 'zustand';
import { Cell, DisabledRows, ExpandableRows, InternalWorksheetColumn, WorksheetItem } from '../../types';
import { EditingCellsArgs } from '../useKeyEvents';
export interface SetEditingCellArgs<T> extends EditingCellsArgs {
    cell: Cell<T> | null;
}
export interface BaseState<Item> {
    columns: Array<InternalWorksheetColumn<Item>>;
    editedCells: Array<Cell<Item>>;
    editedCellsMap: Record<string, Cell<Item>>;
    editingCell: Cell<Item> | null;
    isMetaKey: boolean;
    isShiftPressed: boolean;
    isAutoFillActive: boolean;
    isSelectingActive: boolean;
    isBlockedFillOut: boolean;
    isControlKey: boolean;
    editWithValue: string;
    expandableRows: ExpandableRows;
    disabledRows: DisabledRows;
    hiddenRows: Array<string | number>;
    invalidCells: Array<Cell<Item>>;
    invalidCellsMap: Record<string, Cell<Item>>;
    openedModal: keyof Item | null;
    rows: Item[];
    selectedCells: Array<Cell<Item>>;
    selectedCellsMap: Record<string, Cell<Item>>;
    selectedRows: number[];
    tableRef: HTMLTableElement | null;
    addEditedCells: (cells: Array<Cell<Item>>) => void;
    addInvalidCells: (cells: Array<Cell<Item>>) => void;
    removeInvalidCells: (cells: Array<Cell<Item>>) => void;
    resetInvalidCells: () => void;
    setColumns: (columns: Array<InternalWorksheetColumn<Item>>) => void;
    setExpandableRows: (expandableRows: ExpandableRows, defaultExpandedRows?: Array<string | number>) => void;
    setEditingCell: ({ cell, isMetaKey, isControlKey, editWithValue, }: SetEditingCellArgs<Item>) => void;
    setShiftPressed: (ShiftPressed: boolean) => void;
    setDisabledRows: (disabledRows: DisabledRows) => void;
    setHiddenRows: (hiddenRow: Array<string | number>) => void;
    setOpenModal: (value: keyof Item | null) => void;
    setRows: (rows: Item[]) => void;
    setSelectedCells: (cells: Array<Cell<Item>>) => void;
    setSelectedRows: (rows: number[]) => void;
    setTableRef: (ref: HTMLTableElement | null) => void;
    setAutoFillActive: (isActive: boolean) => void;
    setSelectingActive: (isActive: boolean) => void;
    setBlockFillOut: (isBlocked: boolean) => void;
}
export declare const createWorksheetStore: <Item extends WorksheetItem>() => import("zustand").StoreApi<BaseState<Item>>;
export declare const useWorksheetStore: () => {
    store: import("zustand").StoreApi<BaseState<any>>;
    useStore: typeof useStore;
};
//# sourceMappingURL=useWorksheetStore.d.ts.map