"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectEditor = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../../utils");
var _Select = require("../../../Select");
var _hooks = require("../../hooks");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const InternalSelectEditor = _ref => {
  let {
    cell,
    isEditing,
    onBlur,
    onChange,
    options = []
  } = _ref;
  const inputRef = /*#__PURE__*/(0, _react.createRef)();
  const {
    store,
    useStore
  } = (0, _hooks.useWorksheetStore)();
  const setEditingCell = useStore(store, state => state.setEditingCell);
  (0, _react.useEffect)(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [inputRef, isEditing]);
  const handleChange = (0, _react.useCallback)(value => {
    onChange(value);
  }, [onChange]);
  const handleOpen = (0, _react.useCallback)(() => {
    setEditingCell({
      cell
    });
  }, [cell, setEditingCell]);
  const handleClose = (0, _react.useCallback)(() => {
    onBlur();
    setEditingCell({
      cell: null
    });
  }, [onBlur, setEditingCell]);
  return /*#__PURE__*/_react.default.createElement(_styled.SelectWrapper, null, /*#__PURE__*/_react.default.createElement(_Select.Select, {
    disabled: cell.disabled,
    filterable: false,
    inputRef: inputRef,
    onClose: handleClose,
    onOpen: handleOpen,
    onOptionChange: handleChange,
    options: options,
    value: cell.value
  }));
};
const SelectEditor = (0, _utils.typedMemo)(InternalSelectEditor);
exports.SelectEditor = SelectEditor;