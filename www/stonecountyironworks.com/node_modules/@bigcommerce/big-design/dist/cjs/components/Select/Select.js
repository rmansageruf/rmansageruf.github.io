"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _downshift = require("downshift");
var _react = _interopRequireWildcard(require("react"));
var _reactPopper = require("react-popper");
var _utils = require("../../utils");
var _Box = require("../Box");
var _Form = require("../Form");
var _Input = require("../Input");
var _List = require("../List");
var _styled = require("../Select/styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Select = (0, _utils.typedMemo)(_ref => {
  let {
    action,
    autoComplete = 'off',
    autoWidth = false,
    className,
    disabled,
    filterable = true,
    id,
    inputRef,
    label,
    labelId,
    localization,
    maxHeight,
    onClose,
    onOpen,
    onOptionChange,
    options,
    placeholder,
    placement = 'bottom-start',
    positionFixed = false,
    required,
    style,
    value,
    ...props
  } = _ref;
  const defaultRef = /*#__PURE__*/(0, _react.createRef)();
  const selectUniqueId = (0, _react.useId)();
  const [inputValue, setInputValue] = (0, _react.useState)('');

  // aria-labelledby takes presedence over aria-label so we need to strip it out if there is no label
  // Downshift v7 automatically adds aria-labelledby to props even if there is no label defined
  // This is a workaround to remove the aria-labelledby if there is no label defined
  const ariaLabelledBy = (0, _react.useMemo)(() => {
    if (props['aria-label'] && !label) {
      return {
        'aria-labelledby': undefined
      };
    }
    return {};
  }, [label, props]);
  const flattenOptions = (0, _react.useCallback)(options => {
    const isGroups = options => options.every(option => 'options' in option && !('value' in option));
    return isGroups(options) ? options.map(group => group.options).reduce((acum, curr) => acum.concat(curr), []) : options;
  }, []);

  // We need to pass Downshift only options without groups for accessibility tracking
  const flattenedOptions = (0, _react.useMemo)(() => action ? [...flattenOptions(options), action] : flattenOptions(options), [action, flattenOptions, options]);

  // Find the selected option
  const selectedOption = (0, _react.useMemo)(() => {
    return flattenedOptions.find(option => 'value' in option && option.value === value);
  }, [flattenedOptions, value]);

  // Initialize with flattened options
  const [filteredOptions, setFilteredOptions] = (0, _react.useState)(flattenedOptions);

  // Need to set select options if options prop changes
  (0, _react.useEffect)(() => setFilteredOptions(flattenedOptions), [flattenedOptions]);
  const getFirstMatchingOptionIndex = filteredOptions => {
    return filteredOptions.findIndex(option => !option.disabled);
  };
  const handleOnSelectedItemChange = changes => {
    if (action && changes.selectedItem && changes.selectedItem.content === action.content) {
      action.onActionClick(inputValue || null);
    } else if (changes.selectedItem && 'value' in changes.selectedItem && typeof onOptionChange === 'function') {
      onOptionChange(changes.selectedItem.value, changes.selectedItem);
    }
  };
  const handleOnInputValueChange = _ref2 => {
    let {
      inputValue,
      isOpen
    } = _ref2;
    // Filter only when List is open
    if (filterable && isOpen === true) {
      const newFilteredOptions = filterOptions(inputValue);
      const firstMatchingOptionIndex = getFirstMatchingOptionIndex(newFilteredOptions);
      setFilteredOptions(newFilteredOptions);

      // Auto highlight first matching option
      if (inputValue !== '') {
        setHighlightedIndex(firstMatchingOptionIndex);
      } else if (selectedItem) {
        const selectedItemIndex = flattenedOptions.indexOf(selectedItem);
        setHighlightedIndex(selectedItemIndex);
      }
    }
    setInputValue(inputValue || '');
  };
  const filterOptions = function () {
    let inputVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return flattenedOptions.filter(option => option.content === (action && action.content) || option.content.toLowerCase().startsWith(inputVal.trim().toLowerCase()));
  };
  const handleOnIsOpenChange = _ref3 => {
    let {
      isOpen
    } = _ref3;
    if (filterable && !isOpen) {
      // Reset the options when the List is closed
      setFilteredOptions(flattenedOptions);
    }
    if (isOpen && typeof onOpen === 'function') {
      onOpen();
    }
    if (!isOpen && typeof onClose === 'function') {
      onClose();
    }
  };
  const handleStateReducer = (_state, actionAndChanges) => {
    switch (actionAndChanges.type) {
      case _downshift.useCombobox.stateChangeTypes.InputBlur:
        return {
          ...actionAndChanges.changes,
          inputValue: selectedOption ? selectedOption.content : ''
        };
      case _downshift.useCombobox.stateChangeTypes.InputFocus:
        return {
          ...actionAndChanges.changes,
          isOpen: false // keep the menu closed when input gets focused.
        };

      default:
        return actionAndChanges.changes;
    }
  };
  const {
    closeMenu,
    getInputProps,
    getItemProps,
    getLabelProps,
    getMenuProps,
    getToggleButtonProps,
    highlightedIndex,
    isOpen,
    openMenu,
    selectedItem,
    setHighlightedIndex
  } = (0, _downshift.useCombobox)({
    id: selectUniqueId,
    inputId: id,
    inputValue,
    itemToString: item => item ? item.content : '',
    items: filteredOptions,
    labelId,
    onInputValueChange: handleOnInputValueChange,
    onIsOpenChange: handleOnIsOpenChange,
    onSelectedItemChange: handleOnSelectedItemChange,
    selectedItem: selectedOption || null,
    stateReducer: handleStateReducer
  });

  // Popper
  const referenceRef = (0, _react.useRef)(null);
  const popperRef = (0, _react.useRef)(null);
  const {
    styles,
    attributes,
    update
  } = (0, _reactPopper.usePopper)(referenceRef.current, popperRef.current, {
    modifiers: [{
      name: 'eventListeners',
      options: {
        scroll: isOpen,
        resize: isOpen
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 4]
      }
    }],
    strategy: positionFixed ? 'fixed' : 'absolute',
    placement
  });
  const setCallbackRef = (0, _react.useCallback)(ref => {
    if (typeof inputRef === 'function') {
      inputRef(ref);
    }
  }, [inputRef]);
  const getInputRef = (0, _react.useCallback)(() => {
    if (inputRef && typeof inputRef === 'object') {
      return inputRef;
    } else if (typeof inputRef === 'function') {
      return setCallbackRef;
    }
    return defaultRef;
  }, [defaultRef, inputRef, setCallbackRef]);
  const renderLabel = (0, _react.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/_react.default.createElement(_Form.FormControlLabel, (0, _extends2.default)({}, getLabelProps(), {
        localization: localization,
        renderOptional: !required
      }), label);
    }
    if ( /*#__PURE__*/(0, _react.isValidElement)(label) && label.type === _Form.FormControlLabel) {
      return /*#__PURE__*/(0, _react.cloneElement)(label, getLabelProps());
    }
    (0, _utils.warning)('label must be either a string or a FormControlLabel component.');
  }, [getLabelProps, label, localization, required]);
  const renderToggle = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_styled.DropdownButton, (0, _extends2.default)({}, getToggleButtonProps({
      disabled,
      type: 'button'
    }), {
      "aria-label": "toggle menu",
      variant: "subtle"
    }), /*#__PURE__*/_react.default.createElement(_styled.StyledDropdownIcon, null));
  }, [disabled, getToggleButtonProps]);
  const renderInput = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_styled.StyledInputContainer, {
      ref: referenceRef
    }, /*#__PURE__*/_react.default.createElement(_Input.Input, (0, _extends2.default)({}, getInputProps({
      ...props,
      ...ariaLabelledBy,
      autoComplete,
      disabled,
      onClick: () => {
        !isOpen && openMenu();
      },
      onFocus: event => {
        if (typeof props.onFocus === 'function') {
          props.onFocus(event);
        }
      },
      onKeyDown: event => {
        switch (event.key) {
          case 'Enter':
            event.preventDefault();
            if (isOpen === false) {
              openMenu();
              // https://github.com/downshift-js/downshift/issues/734
              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions,  @typescript-eslint/no-unsafe-member-access
              event.nativeEvent.preventDownshiftDefault = true;
            }
            break;
          case 'Escape':
            if (isOpen === false) {
              // Reset the value to empty
              onOptionChange();
            } else {
              closeMenu();
            }

            // https://github.com/downshift-js/downshift/issues/734
            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-unsafe-member-access
            event.nativeEvent.preventDownshiftDefault = true;
            break;
        }
      },
      placeholder,
      ref: getInputRef(),
      readOnly: !filterable,
      required
    }), {
      iconLeft: selectedItem?.icon,
      iconRight: renderToggle,
      localization: localization
    })));
  }, [getInputProps, props, ariaLabelledBy, autoComplete, disabled, placeholder, getInputRef, filterable, required, selectedItem?.icon, renderToggle, localization, isOpen, openMenu, onOptionChange, closeMenu]);
  return /*#__PURE__*/_react.default.createElement("div", null, renderLabel, renderInput, /*#__PURE__*/_react.default.createElement(_Box.Box, (0, _extends2.default)({
    ref: popperRef,
    style: styles.popper
  }, attributes.poppper, {
    zIndex: "popover"
  }), /*#__PURE__*/_react.default.createElement(_List.List, {
    action: action,
    autoWidth: autoWidth,
    filteredItems: filteredOptions,
    getItemProps: getItemProps,
    getMenuProps: () => getMenuProps({
      ...ariaLabelledBy
    }),
    highlightedIndex: highlightedIndex,
    isOpen: isOpen,
    items: options,
    maxHeight: maxHeight,
    selectedItem: selectedItem && 'value' in selectedItem ? selectedItem : null,
    update: update
  })));
});
exports.Select = Select;