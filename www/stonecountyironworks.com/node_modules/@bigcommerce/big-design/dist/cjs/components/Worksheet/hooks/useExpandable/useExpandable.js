"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useExpandable = void 0;
var _react = require("react");
var _useWorksheetStore = require("../useWorksheetStore");
const useExpandable = rowId => {
  const {
    store,
    useStore
  } = (0, _useWorksheetStore.useWorksheetStore)();
  const expandableRows = useStore(store, state => state.expandableRows);
  const hiddenRows = useStore(store, state => state.hiddenRows);
  const setHiddenRows = useStore(store, state => state.setHiddenRows);
  const onExpand = (0, _react.useCallback)(() => {
    const childIds = expandableRows[rowId];
    setHiddenRows(hiddenRows.filter(hiddenRow => !childIds.includes(hiddenRow)));
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  const onCollapse = (0, _react.useCallback)(() => {
    const childIds = expandableRows[rowId];
    setHiddenRows([...hiddenRows, ...childIds]);
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  const onToggle = (0, _react.useCallback)(isExpanded => {
    if (isExpanded) {
      onCollapse();
    } else {
      onExpand();
    }
  }, [onCollapse, onExpand]);
  const isExpandable = expandableRows !== null && expandableRows[rowId] !== undefined;
  const hasExpanded = isExpandable && !hiddenRows.some(row => expandableRows[rowId].includes(row));
  return (0, _react.useMemo)(() => ({
    hasExpanded,
    isExpandable,
    onToggle
  }), [hasExpanded, isExpandable, onToggle]);
};
exports.useExpandable = useExpandable;