"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StylableCounter = exports.Counter = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _bigDesignIcons = require("@bigcommerce/big-design-icons");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
var _Form = require("../Form");
var _useInputErrors = require("../Form/useInputErrors");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const defaultLocalization = {
  decreaseCount: 'Decrease count',
  increaseCount: 'Increase count',
  optional: 'optional'
};
const StylableCounter = (0, _utils.typedMemo)(_ref => {
  let {
    min = 0,
    max = 100,
    step = 1,
    forwardedRef,
    label,
    labelId,
    localization = defaultLocalization,
    description,
    error,
    disabled,
    value,
    onCountChange,
    ...props
  } = _ref;
  const [focus, setFocus] = (0, _react.useState)(false);
  const uniqueCounterId = (0, _react.useId)();
  const id = props.id ? props.id : uniqueCounterId;
  const {
    errors
  } = (0, _useInputErrors.useInputErrors)(id, error);
  (0, _react.useEffect)(() => {
    if (!Number.isInteger(value)) {
      onCountChange(Math.round(value));
    }
  }, [onCountChange, value]);
  const handleFocus = event => {
    const {
      onFocus
    } = props;
    setFocus(true);
    return onFocus && onFocus(event);
  };
  const handleBlur = event => {
    const {
      onBlur
    } = props;
    setFocus(false);
    return onBlur && onBlur(event);
  };
  const handleIncrease = () => {
    if (value + step > Number(max)) {
      return;
    }

    // Checks that the provided value is a multiple of the step
    if (value % step === 0) {
      onCountChange(value + step);
    }
    // If not, returns nearest higher value that is a multiple of the step
    else {
      onCountChange(value + (step - value % step));
    }
  };
  const handleDecrease = () => {
    if (value - step < Number(min)) {
      return;
    }

    // Checks that the provided value is a multiple of the step
    if (value % step === 0) {
      onCountChange(value - step);
    }
    // If not, returns nearest lower value that is a multiple of the step
    else {
      onCountChange(value - value % step);
    }
  };
  const handleChange = event => {
    const newValue = Number(event.currentTarget.value);
    if (isNaN(newValue)) {
      return;
    }
    if (!Number.isInteger(newValue)) {
      onCountChange(Math.round(newValue));
    }
    if (newValue >= Number(min) && newValue <= Number(max)) {
      onCountChange(newValue);
    }
  };
  const handleKeyPress = event => {
    switch (event.key) {
      case 'ArrowUp':
        handleIncrease();
        break;
      case 'ArrowDown':
        handleDecrease();
        break;
      case 'Escape':
        onCountChange(0);
        break;
      default:
        break;
    }
  };
  const renderedLabel = (0, _react.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/_react.default.createElement(_Form.FormControlLabel, {
        htmlFor: id,
        id: labelId,
        localization: {
          optional: localization.optional
        },
        renderOptional: !props.required
      }, label);
    }
    if ( /*#__PURE__*/(0, _react.isValidElement)(label) && label.type === _Form.FormControlLabel) {
      return /*#__PURE__*/(0, _react.cloneElement)(label, {
        id: labelId,
        htmlFor: id
      });
    }
    (0, _utils.warning)('label must be either a string or a FormControlLabel component.');
  }, [id, label, labelId, localization.optional, props.required]);
  const renderedDescription = (0, _react.useMemo)(() => {
    if (!description) {
      return null;
    }
    if (typeof description === 'string') {
      return /*#__PURE__*/_react.default.createElement(_Form.FormControlDescription, null, description);
    }
    if ( /*#__PURE__*/(0, _react.isValidElement)(description) && description.type === _Form.FormControlDescription) {
      return description;
    }
    (0, _utils.warning)('description must be either a string or a FormControlDescription component.');
  }, [description]);
  return /*#__PURE__*/_react.default.createElement("div", null, renderedLabel, renderedDescription, /*#__PURE__*/_react.default.createElement(_styled.StyledCounterWrapper, {
    disabled: disabled,
    error: errors,
    focus: focus
  }, /*#__PURE__*/_react.default.createElement(_styled.StyledCounterButton, {
    disabled: disabled || value <= Number(min),
    iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.RemoveCircleOutlineIcon, {
      title: localization.decreaseCount
    }),
    onClick: handleDecrease,
    type: "button"
  }), /*#__PURE__*/_react.default.createElement(_styled.StyledCounterInput, (0, _extends2.default)({}, props, {
    disabled: disabled,
    error: errors,
    id: id,
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus,
    onKeyDown: handleKeyPress,
    ref: forwardedRef,
    value: value
  })), /*#__PURE__*/_react.default.createElement(_styled.StyledCounterButton, {
    disabled: disabled || value >= Number(max),
    iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.AddCircleOutlineIcon, {
      title: localization.increaseCount
    }),
    onClick: handleIncrease,
    type: "button"
  })));
});
exports.StylableCounter = StylableCounter;
const Counter = (0, _utils.typedMemo)( /*#__PURE__*/(0, _react.forwardRef)((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(StylableCounter, (0, _extends2.default)({}, props, {
    forwardedRef: ref
  }));
}));
exports.Counter = Counter;