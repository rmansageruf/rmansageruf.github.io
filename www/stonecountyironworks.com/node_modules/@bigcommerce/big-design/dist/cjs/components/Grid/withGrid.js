"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withGridedItems = exports.withGridedContainer = void 0;
var _bigDesignTheme = require("@bigcommerce/big-design-theme");
var _styledComponents = require("styled-components");
const withGridedContainer = () => (0, _styledComponents.css)(["", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";"], _ref => {
  let {
    gridAreas,
    theme
  } = _ref;
  return gridAreas && getGridedStyles(gridAreas, theme, 'grid-template-areas');
}, _ref2 => {
  let {
    gridAutoColumns,
    theme
  } = _ref2;
  return gridAutoColumns && getGridedStyles(gridAutoColumns, theme, 'grid-auto-columns');
}, _ref3 => {
  let {
    gridAutoFlow,
    theme
  } = _ref3;
  return gridAutoFlow && getGridedStyles(gridAutoFlow, theme, 'grid-auto-flow');
}, _ref4 => {
  let {
    gridAutoRows,
    theme
  } = _ref4;
  return gridAutoRows && getGridedStyles(gridAutoRows, theme, 'grid-auto-rows');
}, _ref5 => {
  let {
    gridColumns,
    theme
  } = _ref5;
  return gridColumns && getGridedStyles(gridColumns, theme, 'grid-template-columns');
}, _ref6 => {
  let {
    gridGap,
    theme
  } = _ref6;
  return gridGap && getGridedStyles(gridGap, theme, 'gap');
}, _ref7 => {
  let {
    gridColumnGap,
    theme
  } = _ref7;
  return gridColumnGap && getGridedStyles(gridColumnGap, theme, 'column-gap');
}, _ref8 => {
  let {
    gridRows,
    theme
  } = _ref8;
  return gridRows && getGridedStyles(gridRows, theme, 'grid-template-rows');
}, _ref9 => {
  let {
    gridRowGap,
    theme
  } = _ref9;
  return gridRowGap && getGridedStyles(gridRowGap, theme, 'row-gap');
}, _ref10 => {
  let {
    gridTemplate,
    theme
  } = _ref10;
  return gridTemplate && getGridedStyles(gridTemplate, theme, 'grid-template');
});
exports.withGridedContainer = withGridedContainer;
const withGridedItems = () => (0, _styledComponents.css)(["", ";", ";", ";", ";", ";", ";", ";"], _ref11 => {
  let {
    gridArea,
    theme
  } = _ref11;
  return gridArea && getGridedStyles(gridArea, theme, 'grid-area');
}, _ref12 => {
  let {
    gridColumn,
    theme
  } = _ref12;
  return gridColumn && getGridedStyles(gridColumn, theme, 'grid-column');
}, _ref13 => {
  let {
    gridColumnEnd,
    theme
  } = _ref13;
  return gridColumnEnd && getGridedStyles(gridColumnEnd, theme, 'grid-column-end');
}, _ref14 => {
  let {
    gridColumnStart,
    theme
  } = _ref14;
  return gridColumnStart && getGridedStyles(gridColumnStart, theme, 'grid-column-start');
}, _ref15 => {
  let {
    gridRow,
    theme
  } = _ref15;
  return gridRow && getGridedStyles(gridRow, theme, 'grid-row');
}, _ref16 => {
  let {
    gridRowEnd,
    theme
  } = _ref16;
  return gridRowEnd && getGridedStyles(gridRowEnd, theme, 'grid-row-end');
}, _ref17 => {
  let {
    gridRowStart,
    theme
  } = _ref17;
  return gridRowStart && getGridedStyles(gridRowStart, theme, 'grid-row-start');
});
exports.withGridedItems = withGridedItems;
const getGridedStyles = (gridedProp, theme, cssKey) => {
  if (typeof gridedProp === 'object') {
    return getResponsiveGrid(gridedProp, theme, cssKey);
  }
  if (typeof gridedProp === 'string' || typeof gridedProp === 'number') {
    return getSimpleGrid(gridedProp, cssKey);
  }
  return [];
};
const getSimpleGrid = (gridedProp, cssKey) => (0, _styledComponents.css)(["", ":", ""], cssKey, gridedProp);
const getResponsiveGrid = (gridedProp, theme, cssKey) => {
  const breakpointKeys = Object.keys(gridedProp).sort((firstBreakpoint, secondBreakpoint) =>
  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
  _bigDesignTheme.breakpointsOrder.indexOf(firstBreakpoint) -
  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
  _bigDesignTheme.breakpointsOrder.indexOf(secondBreakpoint));

  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
  return breakpointKeys.map(breakpointKey => (0, _styledComponents.css)(["", "{", " ", "}"], theme.breakpoints[breakpointKey], /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */'', getSimpleGrid(gridedProp[breakpointKey], cssKey)));
};