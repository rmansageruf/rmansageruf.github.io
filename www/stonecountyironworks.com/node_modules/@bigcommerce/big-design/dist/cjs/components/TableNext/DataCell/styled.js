"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledTableDataCheckbox = exports.StyledTableDataCell = void 0;
var _bigDesignTheme = require("@bigcommerce/big-design-theme");
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _mixins = require("../../../mixins");
var _mixins2 = require("../mixins");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const StyledTableDataCell = /*#__PURE__*/_styledComponents.default.td.withConfig({
  displayName: "styled__StyledTableDataCell",
  componentId: "sc-xjsb71-0"
})(["", " ", " background-color:", ";box-sizing:border-box;color:", ";font-size:", ";&:first-of-type{padding-left:", ";}&:last-of-type{padding-right:", ";}", " ", ";", ";", ";"], (0, _mixins2.withTableColumnDisplay)(), (0, _mixins.withPaddings)(), _ref => {
  let {
    theme
  } = _ref;
  return theme.colors.white;
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.colors.secondary70;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.typography.fontSize.medium;
}, _ref4 => {
  let {
    theme,
    paddingHorizontal,
    padding
  } = _ref4;
  return padding || paddingHorizontal ? theme.spacing.xLarge : 0;
}, _ref5 => {
  let {
    theme,
    paddingHorizontal,
    padding
  } = _ref5;
  return padding || paddingHorizontal ? theme.spacing.xLarge : 0;
}, _ref6 => {
  let {
    theme,
    withBorder
  } = _ref6;
  return withBorder && (0, _styledComponents.css)(["border-bottom:", ";"], theme.border.box);
}, _ref7 => {
  let {
    align
  } = _ref7;
  return align && (0, _styledComponents.css)(["text-align:", ";"], align);
}, _ref8 => {
  let {
    verticalAlign
  } = _ref8;
  return verticalAlign && (0, _styledComponents.css)(["vertical-align:", ";"], verticalAlign);
}, _ref9 => {
  let {
    width
  } = _ref9;
  return width !== undefined && (0, _styledComponents.css)(["width:", ";"], typeof width === 'string' ? width : `${width}px`);
});
exports.StyledTableDataCell = StyledTableDataCell;
const StyledTableDataCheckbox = /*#__PURE__*/(0, _styledComponents.default)(StyledTableDataCell).withConfig({
  displayName: "styled__StyledTableDataCheckbox",
  componentId: "sc-xjsb71-1"
})(["", " background-color:", ";padding:", ";&:first-of-type{padding-left:", ";}", " ", ";"], (0, _mixins2.withTableColumnDisplay)(), _ref10 => {
  let {
    theme
  } = _ref10;
  return theme.colors.white;
}, _ref11 => {
  let {
    theme
  } = _ref11;
  return `0 ${theme.spacing.small}`;
}, _ref12 => {
  let {
    theme
  } = _ref12;
  return theme.spacing.xLarge;
}, _ref13 => {
  let {
    isExpandable
  } = _ref13;
  return isExpandable && (0, _styledComponents.css)(["padding-right:0;"]);
}, props => props.isCheckbox && (0, _styledComponents.css)(["width:", ";white-space:nowrap;"], _ref14 => {
  let {
    theme
  } = _ref14;
  return theme.helpers.addValues(theme.spacing.xLarge, theme.spacing.small);
}));
exports.StyledTableDataCheckbox = StyledTableDataCheckbox;
StyledTableDataCell.defaultProps = {
  theme: _bigDesignTheme.theme
};
StyledTableDataCheckbox.defaultProps = {
  theme: _bigDesignTheme.theme
};