"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorksheetModal = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../utils");
var _Modal = require("../../Modal");
var _hooks = require("../hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const InternalWorksheetModal = _ref => {
  let {
    column
  } = _ref;
  const {
    config,
    hash
  } = column;
  const {
    header,
    render,
    saveActionText = 'Save',
    cancelActionText = 'Cancel'
  } = config;
  const {
    store,
    useStore
  } = (0, _hooks.useWorksheetStore)();
  const isModalOpen = useStore(store, (0, _react.useMemo)(() => state => state.openedModal === hash, [hash]));
  const selectedCell = useStore(store, (0, _react.useMemo)(() => state => state.selectedCells[0], []));
  const setOpenModal = useStore(store, state => state.setOpenModal);
  const setEditingCell = useStore(store, state => state.setEditingCell);
  const {
    focusTable
  } = (0, _hooks.useTableFocus)();
  const {
    updateItems
  } = (0, _hooks.useUpdateItems)();
  const [newValue, setNewValue] = (0, _react.useState)(null);
  (0, _react.useEffect)(() => {
    if (selectedCell) {
      setNewValue(selectedCell.value);
    }
  }, [selectedCell]);
  const handleClose = (0, _react.useCallback)(() => {
    setOpenModal(null);
    setEditingCell({
      cell: null
    });
    focusTable();
  }, [focusTable, setEditingCell, setOpenModal]);
  const handleSave = (0, _react.useCallback)(() => {
    if (selectedCell && newValue !== null && newValue !== selectedCell.value) {
      updateItems([selectedCell], [newValue]);
    }
    handleClose();
  }, [handleClose, newValue, selectedCell, updateItems]);
  const renderedContent = (0, _react.useMemo)(() => {
    const onChange = newValue => {
      if (newValue !== undefined) {
        setNewValue(newValue);
      }
    };
    return selectedCell ? render(selectedCell.value, onChange) : null;
  }, [selectedCell, render]);
  return /*#__PURE__*/_react.default.createElement(_Modal.Modal, {
    actions: [{
      text: cancelActionText,
      variant: 'subtle',
      onClick: handleClose
    }, {
      text: saveActionText,
      onClick: handleSave
    }],
    closeOnClickOutside: false,
    closeOnEscKey: true,
    header: header,
    isOpen: isModalOpen,
    onClose: handleClose
  }, renderedContent);
};
const WorksheetModal = (0, _utils.typedMemo)(InternalWorksheetModal);
exports.WorksheetModal = WorksheetModal;