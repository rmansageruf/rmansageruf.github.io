"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useExpandable = void 0;
var _react = require("react");
var _hooks = require("../../../../hooks");
const useExpandable = expandable => {
  const [expandedRows, setExpandedRows] = (0, _react.useState)({});
  const isExpandable = Boolean(expandable);
  const expandedItemsEventCallback = (0, _hooks.useEventCallback)(parentRowId => {
    if (!expandable || parentRowId === null) {
      return;
    }
    const {
      onExpandedChange
    } = expandable;
    const isExpandedRow = expandedRows[parentRowId] !== undefined;
    if (isExpandedRow) {
      const newExpandedRows = Object.entries(expandedRows).filter(_ref => {
        let [key] = _ref;
        return key !== `${parentRowId}`;
      });
      onExpandedChange(Object.fromEntries(newExpandedRows), parentRowId);
    } else {
      const newExpandedRows = {
        ...expandedRows
      };
      newExpandedRows[parentRowId] = true;
      onExpandedChange(newExpandedRows, parentRowId);
    }
  });
  (0, _react.useEffect)(() => {
    if (expandable?.expandedRows) {
      setExpandedRows({
        ...expandable.expandedRows
      });
    }
  }, [expandable?.expandedRows]);
  return {
    expandedRows,
    getChildren: expandable?.getChildren,
    isExpandable,
    onExpandedRow: isExpandable ? expandedItemsEventCallback : undefined,
    setExpandedRows
  };
};
exports.useExpandable = useExpandable;