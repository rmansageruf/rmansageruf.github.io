"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _reactPopper = require("react-popper");
var _Typography = require("../Typography");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Tooltip = /*#__PURE__*/(0, _react.memo)(_ref => {
  let {
    children,
    modifiers,
    trigger,
    id,
    ...props
  } = _ref;
  const [isVisible, setIsVisible] = (0, _react.useState)(false);
  const [tooltipContainer, setTooltipContainer] = (0, _react.useState)(null);
  const tooltipModifiers = (0, _react.useMemo)(() => {
    const mods = modifiers || [];
    return [{
      name: 'eventListeners',
      options: {
        scroll: isVisible,
        resize: isVisible
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 4]
      }
    }, ...mods];
  }, [isVisible, modifiers]);
  (0, _react.useEffect)(() => {
    const container = document.createElement('div');
    document.body.appendChild(container);
    setTooltipContainer(container);
  }, []);
  (0, _react.useEffect)(() => {
    return () => {
      if (tooltipContainer) {
        document.body.removeChild(tooltipContainer);
      }
    };
  }, [tooltipContainer]);
  const renderContent = () => {
    return typeof children === 'string' ? /*#__PURE__*/_react.default.createElement(_Typography.Small, {
      color: "white"
    }, children) : children;
  };
  const hideTooltip = () => {
    setIsVisible(false);
  };
  const showTooltip = () => {
    setIsVisible(true);
  };
  const onKeyDown = event => {
    if (event.key === 'Escape') {
      setIsVisible(false);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactPopper.Manager, null, /*#__PURE__*/_react.default.createElement(_reactPopper.Reference, null, _ref2 => {
    let {
      ref
    } = _ref2;
    return /*#__PURE__*/(0, _react.cloneElement)(trigger, {
      ref,
      onBlur: hideTooltip,
      onFocus: showTooltip,
      onKeyDown,
      onMouseEnter: showTooltip,
      onMouseLeave: hideTooltip
    });
  }), tooltipContainer ? /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react.default.createElement(_reactPopper.Popper, {
    modifiers: tooltipModifiers,
    placement: props.placement || 'top'
  }, _ref3 => {
    let {
      placement,
      ref,
      style
    } = _ref3;
    return isVisible && /*#__PURE__*/_react.default.createElement(_styled.StyledTooltip, {
      "data-placement": placement,
      id: id,
      ref: ref,
      style: style
    }, renderContent());
  }), tooltipContainer) : null);
});
exports.Tooltip = Tooltip;