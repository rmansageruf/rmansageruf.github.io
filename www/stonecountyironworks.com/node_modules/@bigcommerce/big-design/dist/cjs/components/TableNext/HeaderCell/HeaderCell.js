"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderCheckboxCell = exports.HeaderCell = exports.ExpandableHeaderCell = exports.DragIconHeaderCell = void 0;
var _bigDesignIcons = require("@bigcommerce/big-design-icons");
var _react = _interopRequireWildcard(require("react"));
var _hooks = require("../../../hooks");
var _utils = require("../../../utils");
var _Box = require("../../Box");
var _Tooltip = require("../../Tooltip");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const InternalHeaderCell = _ref => {
  let {
    actionsRef,
    children,
    column,
    display,
    hide = false,
    id,
    isSorted,
    localization,
    onSortClick,
    sortDirection,
    stickyHeader
  } = _ref;
  const {
    align = 'left',
    isSortable,
    width,
    tooltip
  } = column;
  const actionsSize = (0, _hooks.useComponentSize)(actionsRef);
  const tooltipId = (0, _react.useId)();
  const renderSortIcon = () => {
    if (!isSorted) {
      return null;
    }
    return sortDirection === 'ASC' ? /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ArrowUpwardIcon, {
      "data-testid": "asc-icon",
      size: "medium",
      title: localization.ascendingOrder
    }) : /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ArrowDownwardIcon, {
      "data-testid": "desc-icon",
      size: "medium",
      title: localization.descendingOrder
    });
  };
  const renderTooltip = () => {
    return /*#__PURE__*/_react.default.createElement(_Tooltip.Tooltip, {
      id: tooltipId,
      placement: "right",
      trigger: /*#__PURE__*/_react.default.createElement(_Box.Box, {
        as: "span",
        marginLeft: "xxSmall"
      }, /*#__PURE__*/_react.default.createElement(_bigDesignIcons.BaselineHelpIcon, {
        "aria-describedby": tooltipId,
        size: "medium",
        title: "Hover or focus for additional context."
      }))
    }, tooltip);
  };
  const handleClick = e => {
    e.preventDefault();
    if (isSortable && typeof onSortClick === 'function') {
      onSortClick(column);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableHeaderCell, {
    display: display,
    id: id,
    isSortable: isSortable,
    onClick: handleClick,
    stickyHeader: stickyHeader,
    stickyHeight: actionsSize.height,
    width: width
  }, /*#__PURE__*/_react.default.createElement(_styled.StyledFlex, {
    align: align,
    alignItems: "center",
    flexDirection: "row",
    hide: hide
  }, children, !hide && renderSortIcon(), Boolean(tooltip) && renderTooltip()), hide && renderSortIcon());
};
const HeaderCheckboxCell = /*#__PURE__*/(0, _react.memo)(_ref2 => {
  let {
    stickyHeader,
    actionsRef
  } = _ref2;
  const actionsSize = (0, _hooks.useComponentSize)(actionsRef);
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableHeaderIcon, {
    stickyHeader: stickyHeader,
    stickyHeight: actionsSize.height
  });
});
exports.HeaderCheckboxCell = HeaderCheckboxCell;
const DragIconHeaderCell = /*#__PURE__*/(0, _react.memo)(_ref3 => {
  let {
    actionsRef,
    headerCellIconRef
  } = _ref3;
  const actionsSize = (0, _hooks.useComponentSize)(actionsRef);
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableHeaderIcon, {
    ref: headerCellIconRef,
    stickyHeight: actionsSize.height
  });
});
exports.DragIconHeaderCell = DragIconHeaderCell;
const ExpandableHeaderCell = /*#__PURE__*/(0, _react.memo)(_ref4 => {
  let {
    actionsRef
  } = _ref4;
  const actionsSize = (0, _hooks.useComponentSize)(actionsRef);
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableHeaderIcon, {
    stickyHeight: actionsSize.height
  });
});
exports.ExpandableHeaderCell = ExpandableHeaderCell;
const HeaderCell = (0, _utils.typedMemo)(InternalHeaderCell);
exports.HeaderCell = HeaderCell;