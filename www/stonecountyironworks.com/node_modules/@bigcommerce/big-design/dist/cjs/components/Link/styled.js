"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledLink = void 0;
var _bigDesignTheme = require("@bigcommerce/big-design-theme");
var _polished = require("polished");
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _mixins = require("../../mixins");
var _transitions = require("../../mixins/transitions");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const StyledLink = /*#__PURE__*/_styledComponents.default.a.withConfig({
  displayName: "styled__StyledLink",
  componentId: "sc-n9mww9-0"
})(["", ";", " ", ";color:", ";cursor:pointer;font-size:", ";font-weight:", ";text-decoration:none;&:active{color:", ";}&:hover:not(:active){color:", ";}", ""], (0, _mixins.withMargins)(), (0, _transitions.withTransition)(['color'], '70ms'), props => props.ellipsis && (0, _polished.ellipsis)(), _ref => {
  let {
    theme
  } = _ref;
  return theme.colors.primary;
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.typography.fontSize.medium;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.typography.fontWeight.regular;
}, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.colors.primary70;
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.colors.primary70;
}, _ref6 => {
  let {
    isExternal,
    theme
  } = _ref6;
  return isExternal && (0, _styledComponents.css)(["display:inline-flex;align-items:center;svg{flex-shrink:0;margin-left:", ";}"], theme.spacing.xxSmall);
});
exports.StyledLink = StyledLink;
StyledLink.defaultProps = {
  theme: _bigDesignTheme.theme
};