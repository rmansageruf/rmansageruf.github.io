"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Alert = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _bigDesignIcons = require("@bigcommerce/big-design-icons");
var _react = _interopRequireWildcard(require("react"));
var _mixins = require("../../mixins");
var _utils = require("../../utils");
var _Box = require("../Box");
var _private = require("../Button/private");
var _Grid = require("../Grid");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Alert = /*#__PURE__*/(0, _react.memo)(_ref => {
  let {
    className,
    style,
    header,
    ...props
  } = _ref;
  const filteredProps = (0, _mixins.excludePaddingProps)(props);
  const icon = (0, _react.useMemo)(() => props.type && (0, _utils.getMessagingIcon)(props.type), [props.type]);
  const renderedMessages = (0, _react.useMemo)(() => props.messages.map((_ref2, index) => {
    let {
      text,
      link
    } = _ref2;
    return /*#__PURE__*/_react.default.createElement(_Box.Box, {
      key: index
    }, /*#__PURE__*/_react.default.createElement(_styled.StyledMessageItem, null, text), ' ', link && /*#__PURE__*/_react.default.createElement(_styled.StyledLink, link, link.text));
  }), [props.messages]);
  const renderedHeader = (0, _react.useMemo)(() => header && /*#__PURE__*/_react.default.createElement(_styled.StyledHeader, null, header), [header]);
  return /*#__PURE__*/_react.default.createElement(_styled.StyledAlert, (0, _extends2.default)({}, filteredProps, {
    role: "alert"
  }), /*#__PURE__*/_react.default.createElement(_Grid.GridItem, {
    gridArea: "icon"
  }, icon), /*#__PURE__*/_react.default.createElement(_Grid.GridItem, {
    gridArea: "messages"
  }, renderedHeader, renderedMessages), props.onClose && /*#__PURE__*/_react.default.createElement(_Grid.GridItem, null, /*#__PURE__*/_react.default.createElement(_private.MessagingButton, {
    iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.CloseIcon, {
      size: "large"
    }),
    onClick: props.onClose
  })));
});
exports.Alert = Alert;
Alert.defaultProps = {
  messages: [],
  type: 'success'
};