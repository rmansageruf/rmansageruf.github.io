"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleEditor = void 0;
var _bigDesignIcons = require("@bigcommerce/big-design-icons");
var _react = _interopRequireWildcard(require("react"));
var _hooks = require("../../hooks");
var _Worksheet = require("../../Worksheet");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const InternalToggleEditor = _ref => {
  let {
    rowId,
    toggle
  } = _ref;
  const {
    onToggle,
    isExpandable,
    hasExpanded
  } = (0, _hooks.useExpandable)(rowId);
  const {
    store,
    useStore
  } = (0, _hooks.useWorksheetStore)();
  const localization = (0, _react.useContext)(_Worksheet.WorksheetLocalizationContext);
  const setEditingCell = useStore(store, state => state.setEditingCell);
  (0, _react.useEffect)(() => {
    if (toggle && isExpandable) {
      onToggle(hasExpanded);
    }
    setEditingCell({
      cell: null
    });
  }, [hasExpanded, isExpandable, onToggle, setEditingCell, toggle]);
  if (!isExpandable) {
    return null;
  }
  if (hasExpanded) {
    return /*#__PURE__*/_react.default.createElement(_styled.StyledExpandButton, {
      iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ExpandMoreIcon, {
        color: "secondary60"
      }),
      onClick: () => {
        onToggle(true);
      },
      title: localization.toggleRowExpanded,
      variant: "subtle"
    });
  }
  return /*#__PURE__*/_react.default.createElement(_styled.StyledExpandButton, {
    iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ChevronRightIcon, {
      color: "secondary60"
    }),
    onClick: () => {
      onToggle(false);
    },
    title: localization.toggleRowExpanded,
    variant: "subtle"
  });
};
const ToggleEditor = /*#__PURE__*/(0, _react.memo)(InternalToggleEditor);
exports.ToggleEditor = ToggleEditor;