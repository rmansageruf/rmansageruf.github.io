"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextEditor = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../../utils");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const InternalTextEditor = _ref => {
  let {
    cell,
    isEdited,
    initialValue,
    onBlur,
    onKeyDown,
    isMetaKey,
    isControlKey
  } = _ref;
  const [value, setValue] = (0, _react.useState)(initialValue || `${cell.value}`);
  const isBlurBlocked = (0, _react.useRef)(false);
  const [isMetaKeyValue, setIsMetaKeyValue] = (0, _react.useState)(isMetaKey);
  const [isControlValue, setIsControlKeyValue] = (0, _react.useState)(isControlKey);
  const handleChange = event => {
    setValue(event.target.value);
  };
  const handleKeyDown = event => {
    // Avoiding the calling of `onBlur` when user press `Escape`
    // since we handle `onBlur` as saving of the cell data and it conflicts;
    if (event.key === 'Escape') {
      isBlurBlocked.current = true;
    } else if (isMetaKeyValue && event.key === 'v' && event.metaKey) {
      setValue('');
      isBlurBlocked.current = false;
      setIsMetaKeyValue(false);
    } else if (isControlValue && event.key === 'v' && event.ctrlKey) {
      setValue('');
      isBlurBlocked.current = false;
      setIsControlKeyValue(false);
    } else {
      isBlurBlocked.current = false;
    }

    // We always receive the value as a string type, cast to Number if column type is number
    onKeyDown(event, formatValue(value));
  };
  const formatValue = value => cell.type === 'number' && value !== '' ? Number(value) : value;
  return /*#__PURE__*/_react.default.createElement(_styled.StyledInput, {
    autoFocus: true,
    isEdited: isEdited,
    onBlur: event => {
      if (!isBlurBlocked.current) {
        onBlur(event, cell);
      }
    },
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    value: value
  });
};
const TextEditor = (0, _utils.typedMemo)(InternalTextEditor);
exports.TextEditor = TextEditor;