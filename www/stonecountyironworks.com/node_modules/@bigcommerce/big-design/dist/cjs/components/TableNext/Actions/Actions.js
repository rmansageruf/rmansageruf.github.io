"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Actions = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _utils = require("../../../utils");
var _Flex = require("../../Flex");
var _Typography = require("../../Typography");
var _SelectAll = require("../SelectAll");
var _TablePagination = require("../TablePagination");
var _styled = require("./styled");
const InternalActions = _ref => {
  let {
    customActions,
    forwardedRef,
    itemName,
    items = [],
    pagination,
    selectedItems,
    stickyHeader,
    tableId,
    getChildren,
    onSelectionChange,
    getRowId,
    setSelectedParentRowsCrossPages,
    selectedParentRowsCrossPages,
    isChildrenRowsSelectable,
    ...props
  } = _ref;
  const isSelectable = typeof onSelectionChange === 'function';
  const totalItems = pagination ? pagination.totalItems : items.length;
  const renderItemName = () => {
    if (typeof itemName !== 'string') {
      return null;
    }
    const text = isSelectable ? itemName : `${totalItems} ${itemName}`;
    return /*#__PURE__*/_react.default.createElement(_Flex.FlexItem, {
      flexShrink: 0,
      marginRight: "medium"
    }, /*#__PURE__*/_react.default.createElement(_Typography.Text, {
      margin: "none"
    }, text));
  };
  const renderActions = () => {
    return customActions ?? null;
  };
  return /*#__PURE__*/_react.default.createElement(_styled.StyledFlex, (0, _extends2.default)({
    alignItems: "center",
    "aria-controls": tableId,
    flexDirection: "row",
    justifyContent: "stretch",
    ref: forwardedRef,
    stickyHeader: stickyHeader
  }, props), isSelectable && /*#__PURE__*/_react.default.createElement(_SelectAll.SelectAll, {
    getChildren: getChildren,
    getRowId: getRowId,
    isChildrenRowsSelectable: isChildrenRowsSelectable,
    items: items,
    onChange: onSelectionChange,
    pagination: pagination,
    selectedItems: selectedItems,
    selectedParentRowsCrossPages: selectedParentRowsCrossPages,
    setSelectedParentRowsCrossPages: setSelectedParentRowsCrossPages,
    totalItems: totalItems
  }), renderItemName(), renderActions(), pagination && /*#__PURE__*/_react.default.createElement(_TablePagination.TablePagination, pagination));
};
const Actions = (0, _utils.typedMemo)(InternalActions);
exports.Actions = Actions;