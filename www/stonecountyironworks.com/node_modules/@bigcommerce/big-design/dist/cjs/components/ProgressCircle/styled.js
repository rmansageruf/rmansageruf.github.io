"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledText = exports.StyledProgressCircle = exports.StyledCircleFiller = exports.StyledCircle = void 0;
var _bigDesignTheme = require("@bigcommerce/big-design-theme");
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _constants = require("./constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const StyledProgressCircle = /*#__PURE__*/_styledComponents.default.svg.withConfig({
  displayName: "styled__StyledProgressCircle",
  componentId: "sc-n3drku-0"
})(["", ""], _ref => {
  let {
    size,
    theme
  } = _ref;
  return (0, _styledComponents.css)(["height:", ";width:", ";"], theme.helpers.remCalc(getDimensions(size)), theme.helpers.remCalc(getDimensions(size)));
});
exports.StyledProgressCircle = StyledProgressCircle;
const StyledCircle = /*#__PURE__*/_styledComponents.default.circle.attrs(_ref2 => {
  let {
    size,
    theme
  } = _ref2;
  return {
    // rem not usable for circle svg cx, cy, and r values in Safari 14
    cx: theme.helpers.emCalc(getDimensions(size) / 2),
    cy: theme.helpers.emCalc(getDimensions(size) / 2),
    r: theme.helpers.emCalc(getDimensions(size) / 2 - getStrokeWidth(size) / 2)
  };
}).withConfig({
  displayName: "styled__StyledCircle",
  componentId: "sc-n3drku-1"
})(["fill:transparent;stroke-width:", ";stroke:", ";"], _ref3 => {
  let {
    size,
    theme
  } = _ref3;
  return theme.helpers.remCalc(getStrokeWidth(size));
}, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.colors.secondary20;
});
exports.StyledCircle = StyledCircle;
const StyledCircleFiller = /*#__PURE__*/(0, _styledComponents.default)(StyledCircle).withConfig({
  displayName: "styled__StyledCircleFiller",
  componentId: "sc-n3drku-2"
})(["stroke-dasharray:", ";stroke:", ";transform-origin:50% 50%;", ";"], _ref5 => {
  let {
    size
  } = _ref5;
  return getStrokeDashArray(size);
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return theme.colors.primary;
}, _ref7 => {
  let {
    percent,
    size
  } = _ref7;
  return typeof percent === 'number' ? (0, _styledComponents.css)(["stroke-dashoffset:", ";transform:rotate(-90deg);transition:stroke-dashoffset 0.35s;"], typeof percent === 'number' ? `${fillLength(percent, size)}` : 0) : (0, _styledComponents.css)(["animation:", " 1s ease-out infinite;stroke-dashoffset:", ";transform:rotate(-90deg);transition:stroke-dashoffset 0.35s;"], spin(size), fillLength(0, size));
});
exports.StyledCircleFiller = StyledCircleFiller;
const StyledText = /*#__PURE__*/_styledComponents.default.text.attrs(() => ({
  dominantBaseline: 'central',
  textAnchor: 'middle',
  x: '50%',
  y: '50%'
})).withConfig({
  displayName: "styled__StyledText",
  componentId: "sc-n3drku-3"
})(["font-size:", ";font-weight:", ";"], _ref8 => {
  let {
    size,
    theme
  } = _ref8;
  return size === 'large' ? theme.typography.fontSize.large : theme.typography.fontSize.small;
}, _ref9 => {
  let {
    size,
    theme
  } = _ref9;
  return size === 'large' ? theme.typography.fontWeight.semiBold : theme.typography.fontWeight.regular;
});
exports.StyledText = StyledText;
const spin = size => (0, _styledComponents.keyframes)(["0%{stroke-dashoffset:", ";transform:rotate(-90deg);}50%{stroke-dashoffset:", ";}100%{stroke-dashoffset:", ";transform:rotate(270deg);}"], fillLength(0, size) * -1, fillLength(37.5, size) * -1, fillLength(0, size) * -1);
function getDimensions() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'medium';
  return _constants.CIRCLE_DIMENSIONS[size];
}
function getStrokeDashArray() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'medium';
  return `${_constants.CIRCLE_CIRCUMFERENCES[size]} ${_constants.CIRCLE_CIRCUMFERENCES[size]}`;
}
function getStrokeWidth() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'medium';
  return _constants.CIRCLE_STROKE_WIDTHS[size];
}
function fillLength(percent) {
  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'medium';
  return _constants.CIRCLE_CIRCUMFERENCES[size] - percent / 100 * _constants.CIRCLE_CIRCUMFERENCES[size];
}
StyledProgressCircle.defaultProps = {
  theme: _bigDesignTheme.theme
};
StyledCircle.defaultProps = {
  theme: _bigDesignTheme.theme
};
StyledCircleFiller.defaultProps = {
  theme: _bigDesignTheme.theme
};
StyledText.defaultProps = {
  theme: _bigDesignTheme.theme
};