"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toggle = void 0;
var _react = _interopRequireWildcard(require("react"));
var _bigDesign = require("@bigcommerce/big-design");
var _utils = require("../../utils");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Toggle = (0, _utils.typedMemo)(_ref => {
  let {
    value: activeValue,
    disabled,
    items,
    label,
    labelId,
    localization,
    onChange,
    ...props
  } = _ref;
  const uniqueId = (0, _react.useId)();
  const id = props.id ? props.id : uniqueId;
  const handleClick = itemId => e => {
    e.preventDefault();
    return onChange(itemId);
  };
  const renderedLabel = (0, _react.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/_react.default.createElement(_bigDesign.FormControlLabel, {
        htmlFor: id,
        id: labelId,
        localization: localization
      }, label);
    }
    if ( /*#__PURE__*/(0, _react.isValidElement)(label) && label.type === _bigDesign.FormControlLabel) {
      return /*#__PURE__*/(0, _react.cloneElement)(label, {
        id: labelId,
        htmlFor: id
      });
    }
    (0, _utils.warning)('label must be either a string or a FormControlLabel component.');
  }, [id, label, labelId, localization]);
  return /*#__PURE__*/_react.default.createElement("div", null, renderedLabel, /*#__PURE__*/_react.default.createElement(_bigDesign.Box, {
    "aria-labelledby": labelId,
    display: "flex",
    id: id,
    marginBottom: "medium",
    role: "group"
  }, items.map((_ref2, idx) => {
    let {
      value: itemId,
      label,
      icon
    } = _ref2;
    return /*#__PURE__*/_react.default.createElement(_styled.StyledButton, {
      "aria-checked": itemId === activeValue,
      disabled: disabled,
      isActive: itemId === activeValue,
      isIconType: !!icon,
      key: idx,
      onClick: handleClick(itemId),
      role: "switch"
    }, icon || label);
  })));
});
exports.Toggle = Toggle;