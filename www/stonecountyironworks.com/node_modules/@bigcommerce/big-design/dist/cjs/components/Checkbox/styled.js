"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledCheckbox = exports.HiddenCheckbox = exports.CheckboxLabelContainer = exports.CheckboxContainer = void 0;
var _bigDesignTheme = require("@bigcommerce/big-design-theme");
var _polished = require("polished");
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _transitions = require("../../mixins/transitions");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const CheckboxLabelContainer = /*#__PURE__*/_styledComponents.default.div.withConfig({
  displayName: "styled__CheckboxLabelContainer",
  componentId: "sc-s1u0st-0"
})(["margin-left:", ";"], _ref => {
  let {
    theme
  } = _ref;
  return theme.spacing.xSmall;
});
exports.CheckboxLabelContainer = CheckboxLabelContainer;
const CheckboxContainer = /*#__PURE__*/_styledComponents.default.div.withConfig({
  displayName: "styled__CheckboxContainer",
  componentId: "sc-s1u0st-1"
})(["align-items:flex-start;display:flex;"]);
exports.CheckboxContainer = CheckboxContainer;
const HiddenCheckbox = /*#__PURE__*/_styledComponents.default.input.withConfig({
  displayName: "styled__HiddenCheckbox",
  componentId: "sc-s1u0st-2"
})(["", ""], (0, _polished.hideVisually)());
exports.HiddenCheckbox = HiddenCheckbox;
const StyledCheckbox = /*#__PURE__*/_styledComponents.default.label.withConfig({
  displayName: "styled__StyledCheckbox",
  componentId: "sc-s1u0st-3"
})(["", " align-items:center;background:", ";box-sizing:border-box;border:", ";border-color:", ";border-radius:", ";color:", ";cursor:pointer;display:inline-flex;height:", ";justify-content:center;margin-bottom:", ";margin-top:", ";user-select:none;width:", ";", ";", " ", ":focus + &{box-shadow:", ";}svg{opacity:", ";}"], (0, _transitions.withTransition)(['border-color', 'background', 'box-shadow', 'color', 'opacity']), _ref2 => {
  let {
    checked,
    isIndeterminate,
    theme
  } = _ref2;
  return checked || isIndeterminate ? theme.colors.primary : theme.colors.white;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.border.box;
}, _ref4 => {
  let {
    checked,
    isIndeterminate,
    theme
  } = _ref4;
  return checked || isIndeterminate ? theme.colors.primary : theme.colors.secondary30;
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.borderRadius.normal;
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return theme.colors.white;
}, _ref7 => {
  let {
    theme
  } = _ref7;
  return theme.spacing.large;
}, _ref8 => {
  let {
    theme
  } = _ref8;
  return theme.helpers.remCalc(2);
}, _ref9 => {
  let {
    theme
  } = _ref9;
  return theme.helpers.remCalc(2);
}, _ref10 => {
  let {
    theme
  } = _ref10;
  return theme.spacing.large;
}, _ref11 => {
  let {
    checked,
    disabled,
    isIndeterminate,
    theme
  } = _ref11;
  return disabled && (0, _styledComponents.css)(["background:", ";border-color:", ";cursor:not-allowed;"], checked || isIndeterminate ? theme.colors.secondary30 : theme.colors.secondary10, theme.colors.secondary30);
}, _ref12 => {
  let {
    checked,
    isIndeterminate,
    disabled,
    theme
  } = _ref12;
  return !disabled && `&:hover {
      border-color: ${checked || isIndeterminate ? theme.colors.primary : theme.colors.secondary40};
    }`;
}, HiddenCheckbox, _ref13 => {
  let {
    theme
  } = _ref13;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.primary20}`;
}, _ref14 => {
  let {
    checked,
    isIndeterminate
  } = _ref14;
  return checked || isIndeterminate ? 1 : 0;
});
exports.StyledCheckbox = StyledCheckbox;
StyledCheckbox.defaultProps = {
  theme: _bigDesignTheme.theme
};
CheckboxLabelContainer.defaultProps = {
  theme: _bigDesignTheme.theme
};