"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.excludePaddingProps = excludePaddingProps;
exports.withPaddings = void 0;
var _styledComponents = require("styled-components");
var _spacings = require("../spacings");
const withPaddings = () => (0, _styledComponents.css)(["", ";", ";", ";", ";", ";", ";", ";"], _ref => {
  let {
    padding,
    theme
  } = _ref;
  return padding && (0, _spacings.getSpacingStyles)(padding, theme, 'padding');
}, _ref2 => {
  let {
    paddingTop,
    theme
  } = _ref2;
  return paddingTop && (0, _spacings.getSpacingStyles)(paddingTop, theme, 'padding-top');
}, _ref3 => {
  let {
    paddingRight,
    theme
  } = _ref3;
  return paddingRight && (0, _spacings.getSpacingStyles)(paddingRight, theme, 'padding-right');
}, _ref4 => {
  let {
    paddingBottom,
    theme
  } = _ref4;
  return paddingBottom && (0, _spacings.getSpacingStyles)(paddingBottom, theme, 'padding-bottom');
}, _ref5 => {
  let {
    paddingLeft,
    theme
  } = _ref5;
  return paddingLeft && (0, _spacings.getSpacingStyles)(paddingLeft, theme, 'padding-left');
}, _ref6 => {
  let {
    paddingVertical,
    theme
  } = _ref6;
  return paddingVertical && (0, _spacings.getSpacingStyles)(paddingVertical, theme, 'padding-top', 'padding-bottom');
}, _ref7 => {
  let {
    paddingHorizontal,
    theme
  } = _ref7;
  return paddingHorizontal && (0, _spacings.getSpacingStyles)(paddingHorizontal, theme, 'padding-left', 'padding-right');
});
exports.withPaddings = withPaddings;
function excludePaddingProps(props) {
  const {
    padding,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    paddingVertical,
    paddingHorizontal,
    ...rest
  } = props;
  return rest;
}