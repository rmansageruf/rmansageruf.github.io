import { useCallback, useEffect } from 'react';
import { useRafState } from './useRafState';
const getSize = element => ({
  height: element ? element.offsetHeight : 0,
  width: element ? element.offsetWidth : 0
});
export const useComponentSize = ref => {
  const [size, setSize] = useRafState(getSize(ref.current));
  const handleResize = useCallback(() => {
    if (ref.current) {
      setSize(getSize(ref.current));
    }
  }, [ref, setSize]);
  useEffect(() => {
    if (!ref.current) {
      return;
    }
    handleResize();
    if (typeof MutationObserver === 'function' && ref.current instanceof Node) {
      const observer = new MutationObserver(handleResize);
      observer.observe(ref.current, {
        childList: true
      });
      return () => {
        observer.disconnect();
      };
    }
  }, [ref, handleResize]);
  return size;
};