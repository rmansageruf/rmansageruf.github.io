import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { typedMemo } from '../../../utils';
import { FlexItem } from '../../Flex';
import { Text } from '../../Typography';
import { SelectAll } from '../SelectAll';
import { TablePagination } from '../TablePagination';
import { StyledFlex } from './styled';
const InternalActions = _ref => {
  let {
    customActions,
    forwardedRef,
    itemName,
    items = [],
    pagination,
    selectedItems,
    stickyHeader,
    tableId,
    getChildren,
    onSelectionChange,
    getRowId,
    setSelectedParentRowsCrossPages,
    selectedParentRowsCrossPages,
    isChildrenRowsSelectable,
    ...props
  } = _ref;
  const isSelectable = typeof onSelectionChange === 'function';
  const totalItems = pagination ? pagination.totalItems : items.length;
  const renderItemName = () => {
    if (typeof itemName !== 'string') {
      return null;
    }
    const text = isSelectable ? itemName : `${totalItems} ${itemName}`;
    return /*#__PURE__*/React.createElement(FlexItem, {
      flexShrink: 0,
      marginRight: "medium"
    }, /*#__PURE__*/React.createElement(Text, {
      margin: "none"
    }, text));
  };
  const renderActions = () => {
    return customActions ?? null;
  };
  return /*#__PURE__*/React.createElement(StyledFlex, _extends({
    alignItems: "center",
    "aria-controls": tableId,
    flexDirection: "row",
    justifyContent: "stretch",
    ref: forwardedRef,
    stickyHeader: stickyHeader
  }, props), isSelectable && /*#__PURE__*/React.createElement(SelectAll, {
    getChildren: getChildren,
    getRowId: getRowId,
    isChildrenRowsSelectable: isChildrenRowsSelectable,
    items: items,
    onChange: onSelectionChange,
    pagination: pagination,
    selectedItems: selectedItems,
    selectedParentRowsCrossPages: selectedParentRowsCrossPages,
    setSelectedParentRowsCrossPages: setSelectedParentRowsCrossPages,
    totalItems: totalItems
  }), renderItemName(), renderActions(), pagination && /*#__PURE__*/React.createElement(TablePagination, pagination));
};
export const Actions = typedMemo(InternalActions);