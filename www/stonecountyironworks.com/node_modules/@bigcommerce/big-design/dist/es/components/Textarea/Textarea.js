import _extends from "@babel/runtime/helpers/esm/extends";
import React, { cloneElement, forwardRef, isValidElement, useId, useMemo } from 'react';
import { typedMemo, warning } from '../../utils';
import { FormControlDescription, FormControlLabel } from '../Form';
import { useInputErrors } from '../Form/useInputErrors';
import { StyledTextarea, StyledTextareaWrapper } from './styled';
const StyleableTextarea = _ref => {
  let {
    description,
    error,
    forwardedRef,
    label,
    labelId,
    localization,
    rows = 3,
    resize = true,
    ...props
  } = _ref;
  const uniqueTextareaId = useId();
  const id = props.id ? props.id : uniqueTextareaId;
  const {
    errors
  } = useInputErrors(id, error);
  const MAX_ROWS = 7;
  const numOfRows = rows && rows > MAX_ROWS ? MAX_ROWS : rows;
  const renderedLabel = useMemo(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/React.createElement(FormControlLabel, {
        htmlFor: id,
        id: labelId,
        localization: localization,
        renderOptional: !props.required
      }, label);
    }
    if ( /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {
      return /*#__PURE__*/cloneElement(label, {
        id: labelId,
        htmlFor: id
      });
    }
    warning('label must be either a string or a FormControlLabel component.');
  }, [id, label, labelId, localization, props.required]);
  const renderedDescription = useMemo(() => {
    if (!description) {
      return null;
    }
    if (typeof description === 'string') {
      return /*#__PURE__*/React.createElement(FormControlDescription, null, description);
    }
    if ( /*#__PURE__*/isValidElement(description) && description.type === FormControlDescription) {
      return description;
    }
    warning('description must be either a string or a FormControlDescription component.');
  }, [description]);
  return /*#__PURE__*/React.createElement("div", null, renderedLabel, renderedDescription, /*#__PURE__*/React.createElement(StyledTextareaWrapper, null, /*#__PURE__*/React.createElement(StyledTextarea, _extends({}, props, {
    error: errors,
    id: id,
    ref: forwardedRef,
    resize: resize,
    rows: numOfRows
  }))));
};
export const Textarea = typedMemo( /*#__PURE__*/forwardRef((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/React.createElement(StyleableTextarea, _extends({}, props, {
    forwardedRef: ref
  }));
}));