import _extends from "@babel/runtime/helpers/esm/extends";
import { CheckIcon } from '@bigcommerce/big-design-icons';
import React, { forwardRef, memo } from 'react';
import { typedMemo } from '../../../utils';
import { Checkbox } from '../../Checkbox';
import { Content } from './Content';
import { StyledListItem } from './styled';
const StyleableListItem = typedMemo(_ref => {
  let {
    actionType = 'normal',
    autoWidth = false,
    forwardedRef,
    index,
    isAction = false,
    isChecked = false,
    isHighlighted,
    isSelected = false,
    item,
    getItemProps,
    addItem,
    removeItem,
    ...props
  } = _ref;
  return removeItem && addItem ? /*#__PURE__*/React.createElement(StyledListItem, _extends({}, getItemProps({
    ...props,
    disabled: item.disabled,
    index,
    item,
    onClick: () => {
      if (item.disabled) {
        return;
      }
      const hasValue = item => 'value' in item;
      if (hasValue(item)) {
        isChecked ? removeItem(item) : addItem(item);
      }
    },
    ref: forwardedRef
  }), {
    actionType: actionType,
    autoWidth: autoWidth,
    isAction: isAction,
    isHighlighted: isHighlighted
  }), /*#__PURE__*/React.createElement(Checkbox, {
    checked: isChecked,
    description: item.description,
    disabled: item.disabled,
    label: item.content,
    onChange: () => null,
    onClick: event => {
      event.preventDefault();
      event.stopPropagation();
    },
    tabIndex: -1
  })) : /*#__PURE__*/React.createElement(StyledListItem, _extends({}, getItemProps({
    ...props,
    disabled: item.disabled,
    index,
    item,
    ref: forwardedRef
  }), {
    actionType: actionType,
    autoWidth: autoWidth,
    isAction: isAction,
    isHighlighted: isHighlighted,
    isSelected: isSelected
  }), /*#__PURE__*/React.createElement(Content, {
    isHighlighted: isHighlighted,
    item: item
  }), isSelected && /*#__PURE__*/React.createElement(CheckIcon, {
    color: "primary",
    size: "large"
  }));
});
export const ListItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(StyleableListItem, _extends({}, props, {
  forwardedRef: ref
}))));