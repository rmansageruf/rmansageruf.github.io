import _extends from "@babel/runtime/helpers/esm/extends";
import { useSelect } from 'downshift';
import React, { cloneElement, isValidElement, memo, useCallback, useId, useMemo, useRef } from 'react';
import { usePopper } from 'react-popper';
import { Box } from '../Box';
import { List } from '../List';
import { StyledBox } from './styled';
export const Dropdown = /*#__PURE__*/memo(_ref => {
  let {
    autoWidth = false,
    className,
    disabled = false,
    maxHeight,
    id,
    items,
    placement = 'bottom-start',
    positionFixed = false,
    toggle,
    style,
    ...props
  } = _ref;
  const dropdownUniqueId = useId();
  const flattenItems = useCallback(items => {
    const isGroups = items => items.every(items => 'items' in items && !('content' in items));
    return isGroups(items) ? items.map(group => group.items).reduce((acum, curr) => acum.concat(curr), []) : items;
  }, []);

  // We only need the items to pass down to Downshift, not groups
  const flattenedItems = useMemo(() => flattenItems(items), [flattenItems, items]);
  const handleOnSelectedItemChange = useCallback(_ref2 => {
    let {
      selectedItem
    } = _ref2;
    // Links don't trigger an onItemClick
    if (selectedItem && selectedItem.type !== 'link' && typeof selectedItem.onItemClick === 'function') {
      // Call onItemClick with selected item
      selectedItem.onItemClick(selectedItem);
    }
  }, []);
  const stateReducer = (state, actionAndChanges) => {
    const {
      changes,
      type
    } = actionAndChanges;
    switch (type) {
      case useSelect.stateChangeTypes.ToggleButtonKeyDownArrowDown:
        if (state.highlightedIndex === flattenedItems.length - 1) {
          return {
            ...changes,
            highlightedIndex: 0
          };
        }
        return changes;
      case useSelect.stateChangeTypes.ToggleButtonKeyDownArrowUp:
        if (state.highlightedIndex === 0) {
          return {
            ...changes,
            highlightedIndex: flattenedItems.length - 1
          };
        }
        return changes;
      case useSelect.stateChangeTypes.ToggleButtonBlur:
        return {
          ...changes,
          selectedItem: null
        };
      default:
        return changes;
    }
  };
  const {
    getItemProps,
    getMenuProps,
    getToggleButtonProps,
    highlightedIndex,
    isOpen
  } = useSelect({
    defaultHighlightedIndex: 0,
    id: dropdownUniqueId,
    itemToString: item => item ? item.content : '',
    items: flattenedItems,
    menuId: id,
    onSelectedItemChange: handleOnSelectedItemChange,
    selectedItem: null,
    // We never set a selected item
    stateReducer,
    // @ts-expect-error toggle is of unknown type
    toggleButtonId: toggle.props.id
  });

  // Popper
  const referenceRef = useRef(null);
  const popperRef = useRef(null);
  const {
    attributes,
    styles,
    update
  } = usePopper(referenceRef.current, popperRef.current, {
    modifiers: [{
      name: 'eventListeners',
      options: {
        scroll: isOpen,
        resize: isOpen
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 4]
      }
    }],
    placement,
    strategy: positionFixed ? 'fixed' : 'absolute'
  });
  const clonedToggle = /*#__PURE__*/isValidElement(toggle) && /*#__PURE__*/cloneElement(toggle, {
    ...getToggleButtonProps({
      'aria-haspopup': 'menu',
      // Downshift sets this to a label id that doesn't exist
      'aria-labelledby': undefined,
      disabled,
      ref: referenceRef,
      role: 'button'
    })
  });
  return /*#__PURE__*/React.createElement(StyledBox, null, clonedToggle, /*#__PURE__*/React.createElement(Box, _extends({
    ref: popperRef,
    style: styles.popper
  }, attributes.poppper, {
    zIndex: "popover"
  }), /*#__PURE__*/React.createElement(List, _extends({}, props, {
    autoWidth: autoWidth,
    getItemProps: getItemProps,
    getMenuProps: () => getMenuProps({
      role: 'menu'
    }),
    highlightedIndex: highlightedIndex,
    isDropdown: true,
    isOpen: isOpen,
    items: items,
    maxHeight: maxHeight,
    update: update
  }))));
});