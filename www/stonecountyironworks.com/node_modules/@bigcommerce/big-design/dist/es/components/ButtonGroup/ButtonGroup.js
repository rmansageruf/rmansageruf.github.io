import _extends from "@babel/runtime/helpers/esm/extends";
import { MoreHorizIcon } from '@bigcommerce/big-design-icons';
import React, { createRef, memo, useCallback, useEffect, useMemo, useState } from 'react';
import { useWindowResizeListener } from '../../hooks';
import { Dropdown } from '../Dropdown';
import { Flex } from '../Flex';
import { StyledButton, StyledFlexItem } from './styled';
const defaultLocalization = {
  more: 'more'
};
const excludeIconProps = _ref => {
  let {
    iconOnly,
    iconRight,
    iconLeft,
    ...actionProps
  } = _ref;
  return actionProps;
};
export const ButtonGroup = /*#__PURE__*/memo(_ref2 => {
  let {
    actions,
    localization = defaultLocalization,
    ...wrapperProps
  } = _ref2;
  const parentRef = /*#__PURE__*/createRef();
  const dropdownRef = /*#__PURE__*/createRef();
  const [isMenuVisible, setIsMenuVisible] = useState(false);
  const [actionsState, setActionsState] = useState([]);
  useEffect(() => {
    setActionsState(actions.map(action => ({
      isVisible: true,
      action: excludeIconProps(action),
      ref: /*#__PURE__*/createRef()
    })));
  }, [actions]);
  const hideOverflowedActions = useCallback(() => {
    const parentWidth = parentRef.current?.offsetWidth ?? 0;
    const dropdownWidth = dropdownRef.current?.offsetWidth ?? 0;
    let remainingWidth = parentWidth;
    const nextState = actionsState.map(stateObj => {
      const actionWidth = stateObj.ref.current?.offsetWidth;
      if (!actionWidth) {
        return stateObj;
      }
      if (stateObj.action.actionType === 'destructive') {
        return {
          ...stateObj,
          isVisible: false
        };
      }
      if (remainingWidth - actionWidth > dropdownWidth) {
        remainingWidth -= actionWidth;
        return {
          ...stateObj,
          isVisible: true
        };
      }
      return {
        ...stateObj,
        isVisible: false
      };
    });
    const visibleActions = actionsState.filter(_ref3 => {
      let {
        isVisible
      } = _ref3;
      return isVisible;
    });
    const nextVisibleActions = nextState.filter(_ref4 => {
      let {
        isVisible
      } = _ref4;
      return isVisible;
    });
    if (visibleActions.length !== nextVisibleActions.length) {
      setActionsState(nextState);
    }
  }, [actionsState, dropdownRef, parentRef]);
  const renderedDropdown = useMemo(() => /*#__PURE__*/React.createElement(StyledFlexItem, {
    "data-testid": "buttongroup-dropdown",
    isVisible: isMenuVisible,
    ref: dropdownRef,
    role: "listitem"
  }, /*#__PURE__*/React.createElement(Dropdown, {
    items: actionsState.filter(_ref5 => {
      let {
        isVisible
      } = _ref5;
      return !isVisible;
    }).map(_ref6 => {
      let {
        action,
        ref
      } = _ref6;
      return {
        actionType: action.actionType,
        content: action.text,
        disabled: action.disabled,
        onItemClick: () => {
          if (ref.current) {
            ref.current.getElementsByTagName('button')[0].click();
          }
        },
        hash: action.text.toLowerCase(),
        icon: action.icon
      };
    }),
    placement: "bottom-end",
    toggle: /*#__PURE__*/React.createElement(StyledButton, {
      borderRadius: actionsState.every(_ref7 => {
        let {
          isVisible
        } = _ref7;
        return !isVisible;
      }),
      iconOnly: /*#__PURE__*/React.createElement(MoreHorizIcon, {
        title: localization.more
      }),
      type: "button",
      variant: "secondary"
    })
  })), [actionsState, dropdownRef, isMenuVisible, localization.more]);
  const renderedActions = useMemo(() => [...actionsState].reverse().sort(_ref8 => {
    let {
      isVisible
    } = _ref8;
    return isVisible ? -1 : 1;
  }).map((_ref9, key) => {
    let {
      action,
      isVisible,
      ref
    } = _ref9;
    const {
      text,
      icon,
      ...buttonProps
    } = action;
    return /*#__PURE__*/React.createElement(StyledFlexItem, {
      "data-testid": "buttongroup-item",
      isVisible: isVisible,
      key: key,
      ref: ref,
      role: "listitem"
    }, /*#__PURE__*/React.createElement(StyledButton, _extends({}, buttonProps, {
      variant: "secondary"
    }), text));
  }), [actionsState]);
  useEffect(() => {
    const nextIsMenuVisible = actionsState.some(_ref10 => {
      let {
        isVisible
      } = _ref10;
      return !isVisible;
    });
    if (nextIsMenuVisible !== isMenuVisible) {
      setIsMenuVisible(nextIsMenuVisible);
    }
  }, [actionsState, isMenuVisible]);
  useEffect(() => {
    hideOverflowedActions();
  }, [actions, parentRef, hideOverflowedActions]);
  useWindowResizeListener(() => {
    hideOverflowedActions();
  });
  return actions.length > 0 ? /*#__PURE__*/React.createElement(Flex, _extends({}, wrapperProps, {
    "data-testid": "buttongroup-wrapper",
    flexDirection: "row",
    flexWrap: "nowrap",
    ref: parentRef,
    role: "list"
  }), renderedActions, renderedDropdown) : null;
});