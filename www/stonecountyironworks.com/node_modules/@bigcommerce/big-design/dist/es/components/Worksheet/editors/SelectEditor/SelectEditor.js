import React, { createRef, useCallback, useEffect } from 'react';
import { typedMemo } from '../../../../utils';
import { Select } from '../../../Select';
import { useWorksheetStore } from '../../hooks';
import { SelectWrapper } from './styled';
const InternalSelectEditor = _ref => {
  let {
    cell,
    isEditing,
    onBlur,
    onChange,
    options = []
  } = _ref;
  const inputRef = /*#__PURE__*/createRef();
  const {
    store,
    useStore
  } = useWorksheetStore();
  const setEditingCell = useStore(store, state => state.setEditingCell);
  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [inputRef, isEditing]);
  const handleChange = useCallback(value => {
    onChange(value);
  }, [onChange]);
  const handleOpen = useCallback(() => {
    setEditingCell({
      cell
    });
  }, [cell, setEditingCell]);
  const handleClose = useCallback(() => {
    onBlur();
    setEditingCell({
      cell: null
    });
  }, [onBlur, setEditingCell]);
  return /*#__PURE__*/React.createElement(SelectWrapper, null, /*#__PURE__*/React.createElement(Select, {
    disabled: cell.disabled,
    filterable: false,
    inputRef: inputRef,
    onClose: handleClose,
    onOpen: handleOpen,
    onOptionChange: handleChange,
    options: options,
    value: cell.value
  }));
};
export const SelectEditor = typedMemo(InternalSelectEditor);