import _extends from "@babel/runtime/helpers/esm/extends";
import React, { cloneElement, forwardRef, isValidElement, useId, useMemo, useState } from 'react';
import { typedMemo, warning } from '../../utils';
import { Chip } from '../Chip';
import { FormControlDescription, FormControlLabel } from '../Form';
import { useInputErrors } from '../Form/useInputErrors';
import { StyledIconWrapper, StyledInput, StyledInputContent, StyledInputWrapper } from './styled';
const StyleableInput = _ref => {
  let {
    chips,
    description,
    disabled,
    error,
    forwardedRef,
    label,
    labelId,
    localization,
    ...props
  } = _ref;
  const [focus, setFocus] = useState(false);
  const uniqueInputId = useId();
  const id = props.id ? props.id : uniqueInputId;
  const {
    errors
  } = useInputErrors(id, error);
  const handleFocus = event => {
    const {
      onFocus
    } = props;
    setFocus(true);
    return onFocus && onFocus(event);
  };
  const handleBlur = event => {
    const {
      onBlur
    } = props;
    setFocus(false);
    return onBlur && onBlur(event);
  };
  const renderedLabel = useMemo(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/React.createElement(FormControlLabel, {
        htmlFor: id,
        id: labelId,
        localization: localization,
        renderOptional: !props.required
      }, label);
    }
    if ( /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {
      return /*#__PURE__*/cloneElement(label, {
        id: labelId,
        htmlFor: id
      });
    }
    warning('label must be either a string or a FormControlLabel component.');
  }, [id, label, labelId, localization, props.required]);
  const renderedDescription = useMemo(() => {
    if (!description) {
      return null;
    }
    if (typeof description === 'string') {
      return /*#__PURE__*/React.createElement(FormControlDescription, null, description);
    }
    if ( /*#__PURE__*/isValidElement(description) && description.type === FormControlDescription) {
      return description;
    }
    warning('description must be either a string or a FormControlDescription component.');
  }, [description]);
  const renderedIconLeft = useMemo(() => {
    if (!props.iconLeft) {
      return null;
    }
    return /*#__PURE__*/React.createElement(StyledIconWrapper, {
      paddingLeft: "xSmall",
      paddingRight: "xxSmall"
    }, props.iconLeft);
  }, [props.iconLeft]);
  const renderedIconRight = useMemo(() => {
    if (!props.iconRight) {
      return null;
    }
    return /*#__PURE__*/React.createElement(StyledIconWrapper, {
      paddingLeft: "xxSmall",
      paddingRight: "xSmall"
    }, props.iconRight);
  }, [props.iconRight]);
  const renderedChips = useMemo(() => {
    if (!chips) {
      return null;
    }
    return chips.map(chip => /*#__PURE__*/React.createElement(Chip, _extends({}, chip, {
      key: chip.label,
      marginBottom: "none"
    })));
  }, [chips]);
  return /*#__PURE__*/React.createElement("div", null, renderedLabel, renderedDescription, /*#__PURE__*/React.createElement(StyledInputWrapper, {
    disabled: disabled,
    error: errors,
    focus: focus
  }, renderedIconLeft, /*#__PURE__*/React.createElement(StyledInputContent, {
    chips: chips
  }, renderedChips, /*#__PURE__*/React.createElement(StyledInput, _extends({}, props, {
    chips: chips,
    disabled: disabled,
    error: errors,
    id: id,
    onBlur: handleBlur,
    onFocus: handleFocus,
    ref: forwardedRef
  }))), renderedIconRight));
};
export const Input = typedMemo( /*#__PURE__*/forwardRef((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/React.createElement(StyleableInput, _extends({}, props, {
    forwardedRef: ref
  }));
}));