import _extends from "@babel/runtime/helpers/esm/extends";
import { DragIndicatorIcon } from '@bigcommerce/big-design-icons';
import React, { forwardRef } from 'react';
import { typedMemo } from '../../../utils';
import { Checkbox } from '../../Checkbox';
import { DataCell } from '../DataCell';
import { StyledTableRow } from './styled';
const InternalRow = _ref => {
  let {
    columns,
    forwardedRef,
    headerCellWidths,
    isDragging = false,
    isSelectable = false,
    isSelected = false,
    item,
    showDragIcon = false,
    onItemSelect,
    ...rest
  } = _ref;
  const onChange = () => {
    if (onItemSelect) {
      onItemSelect(item);
    }
  };
  const label = isSelected ? `Selected` : `Unselected`;
  return /*#__PURE__*/React.createElement(StyledTableRow, _extends({
    isDragging: isDragging,
    isSelected: isSelected,
    ref: forwardedRef
  }, rest), showDragIcon && /*#__PURE__*/React.createElement(DataCell, {
    width: headerCellWidths[0]
  }, /*#__PURE__*/React.createElement(DragIndicatorIcon, null)), isSelectable && /*#__PURE__*/React.createElement(DataCell, {
    isCheckbox: true,
    key: "data-checkbox"
  }, /*#__PURE__*/React.createElement(Checkbox, {
    checked: isSelected,
    hiddenLabel: true,
    label: label,
    onChange: onChange
  })), columns.map((_ref2, columnIndex) => {
    let {
      render: CellContent,
      align,
      display,
      verticalAlign,
      width,
      withPadding = true
    } = _ref2;
    const cellWidth = headerCellWidths[columnIndex + 1];
    return /*#__PURE__*/React.createElement(DataCell, {
      align: align,
      display: display,
      key: columnIndex,
      verticalAlign: verticalAlign,
      width: isDragging ? cellWidth : width,
      withPadding: withPadding
    }, /*#__PURE__*/React.createElement(CellContent, item));
  }));
};
export const Row = typedMemo( /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InternalRow, _extends({}, props, {
  forwardedRef: ref
}))));