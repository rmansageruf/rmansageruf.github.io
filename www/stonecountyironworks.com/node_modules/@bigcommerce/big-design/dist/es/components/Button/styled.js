import { addValues, theme as defaultTheme } from '@bigcommerce/big-design-theme';
import styled, { css } from 'styled-components';
import { withMargins } from '../../mixins';
import { withTransition } from '../../mixins/transitions';
import { Flex } from '../Flex';
export const StyledButton = /*#__PURE__*/styled.button.withConfig({
  displayName: "styled__StyledButton",
  componentId: "sc-3yq204-0"
})(["", " &&{", ";}align-items:center;appearance:none;border:", ";border-radius:", ";color:", ";cursor:pointer;display:inline-flex;flex:none;font-size:", ";font-weight:", ";height:", ";justify-content:center;line-height:", ";outline:none;padding:", ";position:relative;text-align:center;text-decoration:none;user-select:none;vertical-align:middle;white-space:nowrap;width:", ";&:focus{outline:none;}&[disabled]{border-color:", ";pointer-events:none;}& + .bd-button{margin-top:", ";margin-left:", ";", "{margin-top:", ";margin-left:", ";}}", "{width:auto;", ";}", ";", ";", ""], withTransition(['background-color', 'border-color', 'box-shadow', 'color']), withMargins(), _ref => {
  let {
    theme
  } = _ref;
  return theme.border.box;
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.borderRadius.normal;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.colors.white;
}, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.typography.fontSize.medium;
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.typography.fontWeight.regular;
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return addValues(theme.spacing.xxLarge, theme.spacing.xxSmall);
}, _ref7 => {
  let {
    theme
  } = _ref7;
  return theme.lineHeight.xLarge;
}, _ref8 => {
  let {
    theme
  } = _ref8;
  return `0 ${theme.spacing.medium}`;
}, _ref9 => {
  let {
    mobileWidth
  } = _ref9;
  return mobileWidth === 'auto' ? 'auto' : '100%';
}, _ref10 => {
  let {
    theme
  } = _ref10;
  return theme.colors.secondary30;
}, _ref11 => {
  let {
    mobileWidth,
    theme
  } = _ref11;
  return mobileWidth === '100%' && theme.spacing.xSmall;
}, _ref12 => {
  let {
    mobileWidth,
    theme
  } = _ref12;
  return mobileWidth === 'auto' && theme.spacing.xSmall;
}, _ref13 => {
  let {
    theme
  } = _ref13;
  return theme.breakpoints.tablet;
}, _ref14 => {
  let {
    theme
  } = _ref14;
  return theme.spacing.none;
}, _ref15 => {
  let {
    theme
  } = _ref15;
  return theme.spacing.xSmall;
}, _ref16 => {
  let {
    theme
  } = _ref16;
  return theme.breakpoints.tablet;
}, _ref17 => {
  let {
    iconOnly: icon,
    theme
  } = _ref17;
  return icon && css(["padding:0;min-width:", ";"], addValues(theme.spacing.xxLarge, theme.spacing.xxSmall));
}, _ref18 => {
  let {
    iconLeft,
    theme
  } = _ref18;
  return iconLeft && css(["padding-left:", ";"], theme.spacing.xSmall);
}, _ref19 => {
  let {
    iconRight,
    theme
  } = _ref19;
  return iconRight && css(["padding-right:", ";"], theme.spacing.xSmall);
}, props => getButtonStyles(props));
export const ContentWrapper = /*#__PURE__*/styled.span.attrs({}).withConfig({
  displayName: "styled__ContentWrapper",
  componentId: "sc-3yq204-1"
})(["align-content:center;align-items:center;display:inline-grid;grid-auto-flow:column;grid-gap:", ";", ";"], _ref20 => {
  let {
    theme
  } = _ref20;
  return theme.spacing.xSmall;
}, _ref21 => {
  let {
    isLoading
  } = _ref21;
  return isLoading && css(["visibility:hidden;"]);
});
export const LoadingSpinnerWrapper = /*#__PURE__*/styled(Flex).withConfig({
  displayName: "styled__LoadingSpinnerWrapper",
  componentId: "sc-3yq204-2"
})(["position:absolute;"]);

/**
 * These can be generated dynamically but I'm leaning towards being extra
 * explicit and being able to handle corner cases and changes from design easily
 */
const ButtonPrimary = /*#__PURE__*/css(["background-color:", ";border-color:", ";font-weight:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{background-color:", ";}"], _ref22 => {
  let {
    theme
  } = _ref22;
  return theme.colors.primary;
}, _ref23 => {
  let {
    theme
  } = _ref23;
  return theme.colors.primary;
}, _ref24 => {
  let {
    theme
  } = _ref24;
  return theme.typography.fontWeight.semiBold;
}, _ref25 => {
  let {
    theme
  } = _ref25;
  return theme.colors.primary60;
}, _ref26 => {
  let {
    theme
  } = _ref26;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.primary20}`;
}, _ref27 => {
  let {
    theme
  } = _ref27;
  return theme.colors.primary50;
}, _ref28 => {
  let {
    theme
  } = _ref28;
  return theme.colors.secondary30;
});
const ButtonPrimaryDestructive = /*#__PURE__*/css(["background-color:", ";border-color:", ";font-weight:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{background-color:", ";}"], _ref29 => {
  let {
    theme
  } = _ref29;
  return theme.colors.danger;
}, _ref30 => {
  let {
    theme
  } = _ref30;
  return theme.colors.danger;
}, _ref31 => {
  let {
    theme
  } = _ref31;
  return theme.typography.fontWeight.semiBold;
}, _ref32 => {
  let {
    theme
  } = _ref32;
  return theme.colors.danger60;
}, _ref33 => {
  let {
    theme
  } = _ref33;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.danger20}`;
}, _ref34 => {
  let {
    theme
  } = _ref34;
  return theme.colors.danger50;
}, _ref35 => {
  let {
    theme
  } = _ref35;
  return theme.colors.secondary30;
});
const ButtonSecondary = /*#__PURE__*/css(["background-color:transparent;border-color:", ";color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{color:", ";}"], _ref36 => {
  let {
    theme
  } = _ref36;
  return theme.colors.primary;
}, _ref37 => {
  let {
    theme
  } = _ref37;
  return theme.colors.primary;
}, _ref38 => {
  let {
    theme
  } = _ref38;
  return theme.colors.primary20;
}, _ref39 => {
  let {
    theme
  } = _ref39;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.primary20}`;
}, _ref40 => {
  let {
    theme
  } = _ref40;
  return theme.colors.primary10;
}, _ref41 => {
  let {
    theme
  } = _ref41;
  return theme.colors.secondary30;
});
const ButtonSecondaryDestructive = /*#__PURE__*/css(["background-color:transparent;border-color:", ";color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{color:", ";}"], _ref42 => {
  let {
    theme
  } = _ref42;
  return theme.colors.danger;
}, _ref43 => {
  let {
    theme
  } = _ref43;
  return theme.colors.danger;
}, _ref44 => {
  let {
    theme
  } = _ref44;
  return theme.colors.danger20;
}, _ref45 => {
  let {
    theme
  } = _ref45;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.danger20}`;
}, _ref46 => {
  let {
    theme
  } = _ref46;
  return theme.colors.danger10;
}, _ref47 => {
  let {
    theme
  } = _ref47;
  return theme.colors.secondary30;
});
const ButtonSubtle = /*#__PURE__*/css(["background-color:transparent;border-color:transparent;color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{border-color:transparent;color:", ";}"], _ref48 => {
  let {
    theme
  } = _ref48;
  return theme.colors.primary;
}, _ref49 => {
  let {
    theme
  } = _ref49;
  return theme.colors.primary20;
}, _ref50 => {
  let {
    theme
  } = _ref50;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.primary20}`;
}, _ref51 => {
  let {
    theme
  } = _ref51;
  return theme.colors.primary10;
}, _ref52 => {
  let {
    theme
  } = _ref52;
  return theme.colors.secondary30;
});
const ButtonSubtleDestructive = /*#__PURE__*/css(["background-color:transparent;border-color:transparent;color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{border-color:transparent;color:", ";}"], _ref53 => {
  let {
    theme
  } = _ref53;
  return theme.colors.danger;
}, _ref54 => {
  let {
    theme
  } = _ref54;
  return theme.colors.danger20;
}, _ref55 => {
  let {
    theme
  } = _ref55;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.danger20}`;
}, _ref56 => {
  let {
    theme
  } = _ref56;
  return theme.colors.danger10;
}, _ref57 => {
  let {
    theme
  } = _ref57;
  return theme.colors.secondary30;
});
const ButtonUtility = /*#__PURE__*/css(["background-color:transparent;border-color:transparent;color:", ";&:active{background-color:", ";color:", ";}&:focus:not(:active){box-shadow:", ";color:", ";}&:hover:not(:active){background-color:", ";color:", ";}&[disabled]{border-color:transparent;color:", ";}"], _ref58 => {
  let {
    theme
  } = _ref58;
  return theme.colors.secondary60;
}, _ref59 => {
  let {
    theme
  } = _ref59;
  return theme.colors.primary20;
}, _ref60 => {
  let {
    theme
  } = _ref60;
  return theme.colors.primary60;
}, _ref61 => {
  let {
    theme
  } = _ref61;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.secondary10}`;
}, _ref62 => {
  let {
    theme
  } = _ref62;
  return theme.colors.primary50;
}, _ref63 => {
  let {
    theme
  } = _ref63;
  return theme.colors.primary10;
}, _ref64 => {
  let {
    theme
  } = _ref64;
  return theme.colors.primary50;
}, _ref65 => {
  let {
    theme
  } = _ref65;
  return theme.colors.secondary50;
});
const ButtonUtilityDestructive = /*#__PURE__*/css(["background-color:transparent;border-color:transparent;color:", ";&:active{background-color:", ";color:", ";}&:focus:not(:active){box-shadow:", ";color:", ";}&:hover:not(:active){background-color:", ";color:", ";}&[disabled]{border-color:transparent;color:", ";}"], _ref66 => {
  let {
    theme
  } = _ref66;
  return theme.colors.secondary60;
}, _ref67 => {
  let {
    theme
  } = _ref67;
  return theme.colors.danger20;
}, _ref68 => {
  let {
    theme
  } = _ref68;
  return theme.colors.danger60;
}, _ref69 => {
  let {
    theme
  } = _ref69;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.danger20}`;
}, _ref70 => {
  let {
    theme
  } = _ref70;
  return theme.colors.danger40;
}, _ref71 => {
  let {
    theme
  } = _ref71;
  return theme.colors.danger10;
}, _ref72 => {
  let {
    theme
  } = _ref72;
  return theme.colors.danger50;
}, _ref73 => {
  let {
    theme
  } = _ref73;
  return theme.colors.secondary50;
});
function getButtonStyles(props) {
  const {
    actionType,
    variant
  } = props;
  switch (variant) {
    case 'primary':
      return actionType === 'destructive' ? ButtonPrimaryDestructive : ButtonPrimary;
    case 'secondary':
      return actionType === 'destructive' ? ButtonSecondaryDestructive : ButtonSecondary;
    case 'subtle':
      return actionType === 'destructive' ? ButtonSubtleDestructive : ButtonSubtle;
    case 'utility':
      return actionType === 'destructive' ? ButtonUtilityDestructive : ButtonUtility;
  }
}
StyledButton.defaultProps = {
  theme: defaultTheme
};
ContentWrapper.defaultProps = {
  theme: defaultTheme
};
LoadingSpinnerWrapper.defaultProps = {
  theme: defaultTheme
};