import React, { cloneElement, isValidElement, memo, useCallback, useMemo } from 'react';
import { Flex, FlexItem } from '../../Flex';
import { Tooltip } from '../../Tooltip';
import { Small } from '../../Typography';
import { StyledLink } from './styled';
export const Content = /*#__PURE__*/memo(_ref => {
  let {
    item,
    isHighlighted
  } = _ref;
  const iconColor = useMemo(() => {
    if (item.disabled) {
      return 'secondary40';
    }
    if (!isHighlighted || !('onActionClick' in item)) {
      return 'secondary60';
    }
    return 'actionType' in item && item.actionType ? 'danger50' : 'primary';
  }, [isHighlighted, item]);
  const renderIcon = useMemo(() => /*#__PURE__*/isValidElement(item.icon) && /*#__PURE__*/cloneElement(item.icon, {
    color: iconColor,
    size: 'large'
  }), [iconColor, item]);
  const descriptionColor = useCallback(isDisabled => isDisabled ? 'secondary40' : 'secondary60', []);
  const wrapInLink = useCallback((linkItem, content) => /*#__PURE__*/React.createElement(StyledLink, {
    href: linkItem.url,
    tabIndex: -1,
    target: linkItem.target
  }, content), []);
  const wrapInTooltip = useCallback((tooltip, tooltipTrigger) => /*#__PURE__*/React.createElement(Tooltip, {
    modifiers: [{
      name: 'preventOverflow'
    }, {
      name: 'offset',
      options: {
        offset: [0, 20]
      }
    }],
    placement: "left",
    trigger: tooltipTrigger
  }, tooltip), []);
  const getContent = useMemo(() => {
    const {
      content,
      disabled,
      description,
      icon
    } = item;
    const baseContent = /*#__PURE__*/React.createElement(Flex, {
      alignItems: "center",
      flexDirection: "row"
    }, icon && /*#__PURE__*/React.createElement(FlexItem, {
      alignSelf: description ? 'flex-start' : undefined,
      paddingRight: "xSmall",
      paddingTop: description ? 'xSmall' : undefined
    }, renderIcon), description ? /*#__PURE__*/React.createElement(FlexItem, {
      paddingVertical: "xSmall"
    }, content, /*#__PURE__*/React.createElement(Small, {
      color: descriptionColor(disabled)
    }, description)) : content);
    const finalContent = 'type' in item && item.type === 'link' && !disabled ? wrapInLink(item, baseContent) : baseContent;
    return disabled && 'tooltip' in item && item.tooltip ? wrapInTooltip(item.tooltip, finalContent) : finalContent;
  }, [descriptionColor, item, renderIcon, wrapInLink, wrapInTooltip]);
  return getContent;
});