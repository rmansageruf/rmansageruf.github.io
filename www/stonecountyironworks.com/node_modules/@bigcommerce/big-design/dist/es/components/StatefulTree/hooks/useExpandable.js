import { useEffect, useState } from 'react';
export const useExpandable = _ref => {
  let {
    defaultExpanded,
    onExpandedChange
  } = _ref;
  const [expandedNodes, setExpandedNodes] = useState(defaultExpanded ?? []);
  useEffect(() => {
    if (defaultExpanded) {
      setExpandedNodes(defaultExpanded);
    }
  }, [defaultExpanded]);
  useEffect(() => {
    if (typeof onExpandedChange === 'function') {
      onExpandedChange(expandedNodes);
    }
  }, [expandedNodes, onExpandedChange]);
  const onExpand = nodeId => {
    setExpandedNodes([...expandedNodes, nodeId]);
  };
  const onCollapse = nodeId => {
    setExpandedNodes(prevNodes => prevNodes.filter(node => node !== nodeId));
  };
  const onToggle = (nodeId, isExpanded) => {
    if (isExpanded) {
      onCollapse(nodeId);
    } else {
      onExpand(nodeId);
    }
  };
  return {
    expandedNodes,
    onToggle
  };
};