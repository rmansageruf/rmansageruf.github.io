import _extends from "@babel/runtime/helpers/esm/extends";
import React, { createContext, useMemo, useRef } from 'react';
import { StyledUl } from './styled';
import { TreeNode } from './TreeNode';
// We don't have access to the type yet, so we need to pass any into the generic.
export const TreeContext = /*#__PURE__*/createContext({
  expandable: {
    expandedNodes: []
  },
  focusable: {
    focusedNode: '',
    onFocus: () => null
  },
  onKeyDown: () => null,
  treeRef: {
    current: null
  }
});
export const Tree = _ref => {
  let {
    disabledNodes,
    expandable,
    focusable,
    iconless,
    id,
    nodes,
    onKeyDown,
    onNodeClick,
    selectable
  } = _ref;
  const treeRef = useRef(null);
  const initialTreeContext = {
    disabledNodes,
    expandable,
    focusable,
    iconless,
    onKeyDown,
    onNodeClick,
    selectable,
    treeRef
  };
  const renderedItems = useMemo(() => nodes.map((node, index) => /*#__PURE__*/React.createElement(TreeNode, _extends({}, node, {
    key: index
  }))), [nodes]);
  return /*#__PURE__*/React.createElement(TreeContext.Provider, {
    value: initialTreeContext
  }, /*#__PURE__*/React.createElement(StyledUl, {
    "aria-multiselectable": selectable?.type === 'multi',
    id: id,
    ref: treeRef,
    role: "tree",
    style: {
      overflow: 'hidden'
    }
  }, renderedItems));
};