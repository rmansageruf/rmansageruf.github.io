import React, { useRef, useState } from 'react';
import { typedMemo } from '../../../../utils';
import { StyledInput } from './styled';
const InternalTextEditor = _ref => {
  let {
    cell,
    isEdited,
    initialValue,
    onBlur,
    onKeyDown,
    isMetaKey,
    isControlKey
  } = _ref;
  const [value, setValue] = useState(initialValue || `${cell.value}`);
  const isBlurBlocked = useRef(false);
  const [isMetaKeyValue, setIsMetaKeyValue] = useState(isMetaKey);
  const [isControlValue, setIsControlKeyValue] = useState(isControlKey);
  const handleChange = event => {
    setValue(event.target.value);
  };
  const handleKeyDown = event => {
    // Avoiding the calling of `onBlur` when user press `Escape`
    // since we handle `onBlur` as saving of the cell data and it conflicts;
    if (event.key === 'Escape') {
      isBlurBlocked.current = true;
    } else if (isMetaKeyValue && event.key === 'v' && event.metaKey) {
      setValue('');
      isBlurBlocked.current = false;
      setIsMetaKeyValue(false);
    } else if (isControlValue && event.key === 'v' && event.ctrlKey) {
      setValue('');
      isBlurBlocked.current = false;
      setIsControlKeyValue(false);
    } else {
      isBlurBlocked.current = false;
    }

    // We always receive the value as a string type, cast to Number if column type is number
    onKeyDown(event, formatValue(value));
  };
  const formatValue = value => cell.type === 'number' && value !== '' ? Number(value) : value;
  return /*#__PURE__*/React.createElement(StyledInput, {
    autoFocus: true,
    isEdited: isEdited,
    onBlur: event => {
      if (!isBlurBlocked.current) {
        onBlur(event, cell);
      }
    },
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    value: value
  });
};
export const TextEditor = typedMemo(InternalTextEditor);