import _extends from "@babel/runtime/helpers/esm/extends";
import { ChevronRightIcon, DragIndicatorIcon, ExpandMoreIcon } from '@bigcommerce/big-design-icons';
import React, { forwardRef } from 'react';
import { typedMemo } from '../../../utils';
import { MessagingButton } from '../../Button/private';
import { Checkbox } from '../../Checkbox';
import { Flex } from '../../Flex';
import { DataCell } from '../DataCell';
import { StyledTableRow } from './styled';
import { useRowState } from './useRowState';
const ALIGN_MAP = {
  left: 'flex-start',
  right: 'flex-end',
  center: 'center'
};
const InternalRow = _ref => {
  let {
    columns,
    forwardedRef,
    headerCellWidths,
    isDraggable,
    isDragging = false,
    isExpandable = false,
    isSelectable = false,
    isSelected = false,
    item,
    showDragIcon = false,
    onItemSelect,
    onExpandedRow,
    isExpanded = false,
    selectedItems,
    isParentRow = false,
    isChildrenRowsSelectable = false,
    parentRowId,
    childRowId,
    childrenRowsIds,
    ...rest
  } = _ref;
  const {
    hasChildrenRows,
    isChecked,
    isIndeterminate,
    label
  } = useRowState({
    isParentRow,
    isSelected,
    selectedItems,
    isChildrenRowsSelectable,
    childrenRowsIds
  });
  const renderSelectDataCell = () => {
    if (isSelectable && isParentRow) {
      return /*#__PURE__*/React.createElement(DataCell, {
        isCheckbox: true,
        isExpandable: isExpandable,
        key: "data-checkbox",
        width: 10
      }, /*#__PURE__*/React.createElement(Checkbox, {
        checked: isChecked,
        hiddenLabel: true,
        isIndeterminate: isIndeterminate,
        label: label,
        onChange: onItemSelect,
        width: 0
      }));
    }
    return null;
  };
  const renderDragIconCell = () => {
    if (showDragIcon && isParentRow) {
      return /*#__PURE__*/React.createElement(DataCell, {
        padding: "small",
        width: headerCellWidths[0]
      }, /*#__PURE__*/React.createElement(DragIndicatorIcon, null));
    }
    return null;
  };
  const renderExpandedIconCell = () => {
    if (isExpandable && isParentRow && hasChildrenRows) {
      const needsHorizontalPadding = !isSelectable && !isDraggable;
      return /*#__PURE__*/React.createElement(DataCell, {
        align: "center",
        paddingHorizontal: needsHorizontalPadding ? 'small' : 'none'
      }, /*#__PURE__*/React.createElement(MessagingButton, {
        iconOnly: isExpanded ? /*#__PURE__*/React.createElement(ExpandMoreIcon, null) : /*#__PURE__*/React.createElement(ChevronRightIcon, null),
        onClick: onExpandedRow,
        type: "button",
        variant: "subtle"
      }));
    }
    return null;
  };
  const renderExtraCellsForParentRow = () => {
    if (!hasChildrenRows) {
      return [/*#__PURE__*/React.createElement(DataCell, {
        key: `parent-extra-cell-${parentRowId}-1`
      })];
    }
    return [];
  };
  const renderExtraCellsForChildRow = () => {
    const extraDataCells = [/*#__PURE__*/React.createElement(DataCell, {
      key: `child-extra-cell-${childRowId}-0`
    })];
    if (isDraggable) {
      extraDataCells.push( /*#__PURE__*/React.createElement(DataCell, {
        key: `child-extra-cell-${childRowId}-1`
      }));
    }
    if (isSelectable) {
      extraDataCells.push( /*#__PURE__*/React.createElement(DataCell, {
        key: `child-extra-cell-${childRowId}-2`
      }));
    }
    return extraDataCells;
  };
  return /*#__PURE__*/React.createElement(StyledTableRow, _extends({
    isDragging: isDragging,
    isSelected: isSelected,
    ref: forwardedRef
  }, rest), renderDragIconCell(), isParentRow && renderSelectDataCell(), renderExpandedIconCell(), isParentRow && isExpandable && renderExtraCellsForParentRow(), isExpandable && !isParentRow && renderExtraCellsForChildRow(), columns.map((_ref2, columnIndex) => {
    let {
      render: CellContent,
      align,
      display,
      verticalAlign,
      width,
      withPadding = true
    } = _ref2;
    const cellWidth = headerCellWidths[columnIndex + 1];
    return /*#__PURE__*/React.createElement(DataCell, {
      align: align,
      display: display,
      key: columnIndex,
      padding: withPadding ? 'small' : 'none',
      verticalAlign: verticalAlign,
      width: isDragging ? cellWidth : width
    }, /*#__PURE__*/React.createElement(Flex, {
      alignItems: "center",
      flexDirection: "row",
      justifyContent: align && ALIGN_MAP[align]
    }, columnIndex === 0 && !isParentRow && isChildrenRowsSelectable && /*#__PURE__*/React.createElement(Checkbox, {
      checked: isSelected,
      hiddenLabel: true,
      label: label,
      onChange: onItemSelect,
      width: 0
    }), /*#__PURE__*/React.createElement(CellContent, item)));
  }));
};
export const Row = typedMemo( /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InternalRow, _extends({}, props, {
  forwardedRef: ref
}))));