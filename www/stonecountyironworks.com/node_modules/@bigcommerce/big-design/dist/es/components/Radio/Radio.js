import _extends from "@babel/runtime/helpers/esm/extends";
import React, { cloneElement, forwardRef, isValidElement, useId, useMemo } from 'react';
import { typedMemo, warning } from '../../utils';
import { FormControlDescription } from '../Form';
import { RadioLabel } from './Label';
import { HiddenRadio, RadioContainer, RadioLabelContainer, StyledRadio } from './styled';
const RawRadio = _ref => {
  let {
    checked,
    className,
    description,
    disabled,
    label,
    forwardedRef,
    style,
    ...props
  } = _ref;
  const uniqueRadioId = useId();
  const labelId = useId();
  const id = props.id ? props.id : uniqueRadioId;
  const renderedLabel = useMemo(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/React.createElement(RadioLabel, {
        "aria-hidden": disabled,
        disabled: disabled,
        htmlFor: id,
        id: labelId
      }, label);
    }
    if ( /*#__PURE__*/isValidElement(label) && label.type === RadioLabel) {
      return /*#__PURE__*/cloneElement(label, {
        htmlFor: id,
        id: labelId
      });
    }
    warning('label must be either a string or a RadioLabel component.');
  }, [disabled, id, label, labelId]);
  const renderedDescription = useMemo(() => {
    if (!description) {
      return null;
    }
    const link = typeof description === 'object' ? description.link : undefined;
    const text = typeof description === 'object' ? description.text : description;
    return /*#__PURE__*/React.createElement(FormControlDescription, {
      link: link
    }, text);
  }, [description]);
  return /*#__PURE__*/React.createElement(RadioContainer, {
    className: className,
    style: style
  }, /*#__PURE__*/React.createElement(HiddenRadio, _extends({
    checked: checked,
    disabled: disabled,
    id: id,
    type: "radio"
  }, props, {
    "aria-labelledby": labelId,
    ref: forwardedRef
  })), /*#__PURE__*/React.createElement(StyledRadio, {
    "aria-hidden": true,
    checked: checked,
    disabled: disabled,
    htmlFor: id
  }), /*#__PURE__*/React.createElement(RadioLabelContainer, null, renderedLabel, renderedDescription));
};
export const Radio = typedMemo( /*#__PURE__*/forwardRef((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/React.createElement(RawRadio, _extends({}, props, {
    forwardedRef: ref
  }));
}));