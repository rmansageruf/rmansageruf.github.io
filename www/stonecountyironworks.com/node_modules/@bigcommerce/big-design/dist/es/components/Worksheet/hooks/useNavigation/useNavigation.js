import { useCallback, useMemo } from 'react';
import { useWorksheetStore } from '../useWorksheetStore';
export const useNavigation = selectedCell => {
  const {
    store,
    useStore
  } = useWorksheetStore();
  const rows = useStore(store, useMemo(() => state => state.rows, []));
  const columns = useStore(store, useMemo(() => state => state.columns, []));
  const hiddenRows = useStore(store, useMemo(() => state => state.hiddenRows, []));
  const setSelectedCells = useStore(store, state => state.setSelectedCells);
  const setSelectedRows = useStore(store, state => state.setSelectedRows);
  const isValidPosition = useCallback(position => {
    const rowLength = rows.length;
    const columnsLength = columns.length;

    // Check to see if the next indexes fit inside the matrix
    return position.rowIndex >= 0 && position.rowIndex < rowLength && position.columnIndex >= 0 && position.columnIndex < columnsLength;
  }, [columns, rows]);
  const isHidden = useCallback(rowIndex => {
    const row = rows[rowIndex];
    const {
      id
    } = row;
    return hiddenRows.includes(id);
  }, [hiddenRows, rows]);

  // This function will look for the next non hidden offset,
  // depending on the direction of the offset.
  const getNextOffset = useCallback(_ref => {
    let {
      columnIndex,
      rowIndex
    } = _ref;
    if (rowIndex === 0) {
      if (columnIndex > 0) {
        return {
          columnIndex: ++columnIndex,
          rowIndex
        };
      }
      return {
        columnIndex: --columnIndex,
        rowIndex
      };
    }
    if (rowIndex > 0) {
      return {
        rowIndex: ++rowIndex,
        columnIndex
      };
    }
    return {
      rowIndex: --rowIndex,
      columnIndex
    };
  }, []);
  const navigate = useCallback(offset => {
    if (!selectedCell) {
      return;
    }
    const newPosition = {
      columnIndex: selectedCell.columnIndex + offset.columnIndex,
      rowIndex: selectedCell.rowIndex + offset.rowIndex
    };
    if (isValidPosition(newPosition)) {
      if (isHidden(newPosition.rowIndex)) {
        return navigate(getNextOffset(offset));
      }
      const hash = columns[newPosition.columnIndex].hash;
      const type = columns[newPosition.columnIndex].type || 'text';
      const value = rows[newPosition.rowIndex][hash];
      const disabled = columns[newPosition.columnIndex].disabled || false;
      const cell = {
        ...newPosition,
        disabled,
        hash,
        type,
        value
      };
      setSelectedCells([cell]);
      setSelectedRows([newPosition.rowIndex]);
    }
  }, [columns, getNextOffset, isHidden, isValidPosition, rows, selectedCell, setSelectedCells, setSelectedRows]);
  return useMemo(() => ({
    navigate
  }), [navigate]);
};