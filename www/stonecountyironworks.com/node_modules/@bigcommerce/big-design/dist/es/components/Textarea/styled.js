import { theme as defaultTheme } from '@bigcommerce/big-design-theme';
import styled, { css } from 'styled-components';
import { withTransition } from '../../mixins/transitions';
export const StyledTextareaWrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "styled__StyledTextareaWrapper",
  componentId: "sc-c1uos0-0"
})(["align-items:center;display:flex;position:relative;"]);
export const StyledTextarea = /*#__PURE__*/styled.textarea.withConfig({
  displayName: "styled__StyledTextarea",
  componentId: "sc-c1uos0-1"
})(["", " background-color:", ";border-radius:", ";box-sizing:border-box;color:", ";line-height:", ";max-height:", ";padding:", ";width:100%;", ";", ";&:hover:not([disabled]){", "}&:focus{outline:none;box-shadow:0 0 0 4px ", ";}&[disabled]{background-color:", ";}&::placeholder{color:", ";line-height:", ";font-size:", ";}"], withTransition(['border', 'box-shadow']), _ref => {
  let {
    theme
  } = _ref;
  return theme.colors.white;
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.borderRadius.normal;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.colors.secondary70;
}, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.lineHeight.medium;
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.helpers.remCalc(224);
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return `${theme.spacing.xxSmall} ${theme.spacing.small}`;
}, _ref7 => {
  let {
    resize
  } = _ref7;
  return resize ? css(["resize:vertical;"]) : css(["resize:none;"]);
}, _ref8 => {
  let {
    error,
    theme
  } = _ref8;
  return css(["border:", ";"], error ? theme.border.boxError : theme.border.box);
}, _ref9 => {
  let {
    error,
    theme
  } = _ref9;
  return error ? css(["border:", ";"], theme.border.boxError) : css(["border:1px solid ", ";"], theme.colors.secondary40);
}, props => props.error ? props.theme.colors.danger20 : props.theme.colors.primary20, _ref10 => {
  let {
    theme
  } = _ref10;
  return theme.colors.secondary20;
}, _ref11 => {
  let {
    theme
  } = _ref11;
  return theme.colors.secondary40;
}, _ref12 => {
  let {
    theme
  } = _ref12;
  return theme.lineHeight.medium;
}, _ref13 => {
  let {
    theme
  } = _ref13;
  return theme.typography.fontSize.medium;
});
StyledTextarea.defaultProps = {
  theme: defaultTheme
};
StyledTextareaWrapper.defaultProps = {
  theme: defaultTheme
};