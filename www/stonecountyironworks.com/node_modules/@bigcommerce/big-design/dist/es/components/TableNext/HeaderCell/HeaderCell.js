import { ArrowDownwardIcon, ArrowUpwardIcon, BaselineHelpIcon } from '@bigcommerce/big-design-icons';
import React, { memo, useId } from 'react';
import { useComponentSize } from '../../../hooks';
import { typedMemo } from '../../../utils';
import { Box } from '../../Box';
import { Tooltip } from '../../Tooltip';
import { StyledFlex, StyledTableHeaderCell, StyledTableHeaderIcon } from './styled';
const InternalHeaderCell = _ref => {
  let {
    actionsRef,
    children,
    column,
    display,
    hide = false,
    id,
    isSorted,
    localization,
    onSortClick,
    sortDirection,
    stickyHeader
  } = _ref;
  const {
    align = 'left',
    isSortable,
    width,
    tooltip
  } = column;
  const actionsSize = useComponentSize(actionsRef);
  const tooltipId = useId();
  const renderSortIcon = () => {
    if (!isSorted) {
      return null;
    }
    return sortDirection === 'ASC' ? /*#__PURE__*/React.createElement(ArrowUpwardIcon, {
      "data-testid": "asc-icon",
      size: "medium",
      title: localization.ascendingOrder
    }) : /*#__PURE__*/React.createElement(ArrowDownwardIcon, {
      "data-testid": "desc-icon",
      size: "medium",
      title: localization.descendingOrder
    });
  };
  const renderTooltip = () => {
    return /*#__PURE__*/React.createElement(Tooltip, {
      id: tooltipId,
      placement: "right",
      trigger: /*#__PURE__*/React.createElement(Box, {
        as: "span",
        marginLeft: "xxSmall"
      }, /*#__PURE__*/React.createElement(BaselineHelpIcon, {
        "aria-describedby": tooltipId,
        size: "medium",
        title: "Hover or focus for additional context."
      }))
    }, tooltip);
  };
  const handleClick = e => {
    e.preventDefault();
    if (isSortable && typeof onSortClick === 'function') {
      onSortClick(column);
    }
  };
  return /*#__PURE__*/React.createElement(StyledTableHeaderCell, {
    display: display,
    id: id,
    isSortable: isSortable,
    onClick: handleClick,
    stickyHeader: stickyHeader,
    stickyHeight: actionsSize.height,
    width: width
  }, /*#__PURE__*/React.createElement(StyledFlex, {
    align: align,
    alignItems: "center",
    flexDirection: "row",
    hide: hide
  }, children, !hide && renderSortIcon(), Boolean(tooltip) && renderTooltip()), hide && renderSortIcon());
};
export const HeaderCheckboxCell = /*#__PURE__*/memo(_ref2 => {
  let {
    stickyHeader,
    actionsRef
  } = _ref2;
  const actionsSize = useComponentSize(actionsRef);
  return /*#__PURE__*/React.createElement(StyledTableHeaderIcon, {
    stickyHeader: stickyHeader,
    stickyHeight: actionsSize.height
  });
});
export const DragIconHeaderCell = /*#__PURE__*/memo(_ref3 => {
  let {
    actionsRef,
    headerCellIconRef
  } = _ref3;
  const actionsSize = useComponentSize(actionsRef);
  return /*#__PURE__*/React.createElement(StyledTableHeaderIcon, {
    ref: headerCellIconRef,
    stickyHeight: actionsSize.height
  });
});
export const ExpandableHeaderCell = /*#__PURE__*/memo(_ref4 => {
  let {
    actionsRef
  } = _ref4;
  const actionsSize = useComponentSize(actionsRef);
  return /*#__PURE__*/React.createElement(StyledTableHeaderIcon, {
    stickyHeight: actionsSize.height
  });
});
export const HeaderCell = typedMemo(InternalHeaderCell);