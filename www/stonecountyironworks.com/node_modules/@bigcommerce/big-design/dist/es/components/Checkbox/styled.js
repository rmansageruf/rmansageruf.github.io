import { theme as defaultTheme } from '@bigcommerce/big-design-theme';
import { hideVisually } from 'polished';
import styled, { css } from 'styled-components';
import { withTransition } from '../../mixins/transitions';
export const CheckboxLabelContainer = /*#__PURE__*/styled.div.withConfig({
  displayName: "styled__CheckboxLabelContainer",
  componentId: "sc-s1u0st-0"
})(["margin-left:", ";"], _ref => {
  let {
    theme
  } = _ref;
  return theme.spacing.xSmall;
});
export const CheckboxContainer = /*#__PURE__*/styled.div.withConfig({
  displayName: "styled__CheckboxContainer",
  componentId: "sc-s1u0st-1"
})(["align-items:flex-start;display:flex;"]);
export const HiddenCheckbox = /*#__PURE__*/styled.input.withConfig({
  displayName: "styled__HiddenCheckbox",
  componentId: "sc-s1u0st-2"
})(["", ""], hideVisually());
export const StyledCheckbox = /*#__PURE__*/styled.label.withConfig({
  displayName: "styled__StyledCheckbox",
  componentId: "sc-s1u0st-3"
})(["", " align-items:center;background:", ";box-sizing:border-box;border:", ";border-color:", ";border-radius:", ";color:", ";cursor:pointer;display:inline-flex;height:", ";justify-content:center;margin-bottom:", ";margin-top:", ";user-select:none;width:", ";", ";", " ", ":focus + &{box-shadow:", ";}svg{opacity:", ";}"], withTransition(['border-color', 'background', 'box-shadow', 'color', 'opacity']), _ref2 => {
  let {
    checked,
    isIndeterminate,
    theme
  } = _ref2;
  return checked || isIndeterminate ? theme.colors.primary : theme.colors.white;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.border.box;
}, _ref4 => {
  let {
    checked,
    isIndeterminate,
    theme
  } = _ref4;
  return checked || isIndeterminate ? theme.colors.primary : theme.colors.secondary30;
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.borderRadius.normal;
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return theme.colors.white;
}, _ref7 => {
  let {
    theme
  } = _ref7;
  return theme.spacing.large;
}, _ref8 => {
  let {
    theme
  } = _ref8;
  return theme.helpers.remCalc(2);
}, _ref9 => {
  let {
    theme
  } = _ref9;
  return theme.helpers.remCalc(2);
}, _ref10 => {
  let {
    theme
  } = _ref10;
  return theme.spacing.large;
}, _ref11 => {
  let {
    checked,
    disabled,
    isIndeterminate,
    theme
  } = _ref11;
  return disabled && css(["background:", ";border-color:", ";cursor:not-allowed;"], checked || isIndeterminate ? theme.colors.secondary30 : theme.colors.secondary10, theme.colors.secondary30);
}, _ref12 => {
  let {
    checked,
    isIndeterminate,
    disabled,
    theme
  } = _ref12;
  return !disabled && `&:hover {
      border-color: ${checked || isIndeterminate ? theme.colors.primary : theme.colors.secondary40};
    }`;
}, HiddenCheckbox, _ref13 => {
  let {
    theme
  } = _ref13;
  return `0 0 0 ${theme.spacing.xxSmall} ${theme.colors.primary20}`;
}, _ref14 => {
  let {
    checked,
    isIndeterminate
  } = _ref14;
  return checked || isIndeterminate ? 1 : 0;
});
StyledCheckbox.defaultProps = {
  theme: defaultTheme
};
CheckboxLabelContainer.defaultProps = {
  theme: defaultTheme
};