import _extends from "@babel/runtime/helpers/esm/extends";
import React, { forwardRef, memo, useEffect, useState } from 'react';
import { default as ReactDatePicker, registerLocale } from 'react-datepicker';
import { createLocalizationProvider } from '../../utils';
import { Input } from '../Input';
import Header from './Header';
import { StyledDatepicker } from './styled';
const RawDatepicker = _ref => {
  let {
    dateFormat = 'EE, dd MMM, yyyy',
    disabled,
    error,
    forwardedRef,
    label,
    locale = 'en-US',
    localization,
    min,
    max,
    onDateChange,
    required,
    placeholder,
    value,
    ...props
  } = _ref;
  const [selected, setSelected] = useState();
  const localizationProvider = createLocalizationProvider(locale);
  registerLocale(locale, localizationProvider);
  const updateDate = value => onDateChange(value ? value.toISOString() : value);
  useEffect(() => {
    if (typeof value === 'string') {
      setSelected(new Date(value));
    } else {
      setSelected(undefined);
    }
  }, [value]);
  return /*#__PURE__*/React.createElement(StyledDatepicker, null, /*#__PURE__*/React.createElement(ReactDatePicker, {
    calendarClassName: "bc-datepicker",
    className: "calendar-input",
    customInput: /*#__PURE__*/React.createElement(Input, _extends({
      error: error,
      label: label,
      localization: localization
    }, props)),
    dateFormat: dateFormat || 'EE, dd MMM, yyyy',
    disabled: disabled,
    locale: locale,
    maxDate: max ? new Date(max) : undefined,
    minDate: min ? new Date(min) : undefined,
    onChange: updateDate,
    placeholderText: placeholder,
    ref: forwardedRef,
    renderCustomHeader: _ref2 => {
      let {
        date,
        decreaseMonth,
        increaseMonth,
        prevMonthButtonDisabled,
        nextMonthButtonDisabled
      } = _ref2;
      return /*#__PURE__*/React.createElement(Header, {
        date: date,
        decreaseMonth: decreaseMonth,
        increaseMonth: increaseMonth,
        months: localizationProvider.monthsLong,
        nextMonthButtonDisabled: nextMonthButtonDisabled,
        prevMonthButtonDisabled: prevMonthButtonDisabled
      });
    },
    required: required,
    selected: selected
  }));
};
export const Datepicker = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(RawDatepicker, _extends({}, props, {
  forwardedRef: ref
}))));