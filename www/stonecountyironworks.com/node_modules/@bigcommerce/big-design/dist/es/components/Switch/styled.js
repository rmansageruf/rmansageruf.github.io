import { theme as defaultTheme } from '@bigcommerce/big-design-theme';
import { hideVisually } from 'polished';
import styled, { css } from 'styled-components';
import { withTransition } from '../../mixins/transitions';
export const HiddenCheckbox = /*#__PURE__*/styled.input.withConfig({
  displayName: "styled__HiddenCheckbox",
  componentId: "sc-5vnqm9-0"
})(["", " ", ""], hideVisually(), _ref => {
  let {
    theme
  } = _ref;
  return css(["&:focus + label::before{box-shadow:0px 0px 0px 4px ", ";"], theme.helpers.createRGBA(theme.colors.primary, 0.2));
});
export const StyledSwitchLabel = /*#__PURE__*/styled.label.withConfig({
  displayName: "styled__StyledSwitchLabel",
  componentId: "sc-5vnqm9-1"
})(["", " background:", ";border-color:", ";border-radius:", ";cursor:pointer;height:", ";position:relative;width:", ";&:hover{&::before{", "}}&:focus{&::before{box-shadow:0px 0px 0px 4px ", ";}}", " &::before{", " ", " background:", ";border-radius:", ";content:'';height:", ";left:calc(100% - ", ");position:absolute;top:-", ";width:", ";", " ", "}"], withTransition(['background, border-color']), _ref2 => {
  let {
    checked,
    theme
  } = _ref2;
  return checked ? theme.colors.primary30 : theme.colors.secondary30;
}, _ref3 => {
  let {
    checked,
    theme
  } = _ref3;
  return checked ? theme.colors.primary30 : theme.colors.secondary30;
}, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.helpers.remCalc(8);
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.helpers.remCalc(14);
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return theme.helpers.remCalc(38);
}, _ref7 => {
  let {
    checked,
    theme
  } = _ref7;
  return checked ? css(["box-shadow:0px 0px 0px 4px ", ";"], theme.helpers.createRGBA(theme.colors.primary, 0.2)) : css(["box-shadow:0px 0px 0px 4px ", ";"], theme.helpers.createRGBA(theme.colors.secondary50, 0.2));
}, _ref8 => {
  let {
    theme
  } = _ref8;
  return theme.helpers.createRGBA(theme.colors.primary, 0.2);
}, _ref9 => {
  let {
    checked,
    disabled,
    theme
  } = _ref9;
  return disabled && css(["background:", ";cursor:not-allowed;&:hover{&::before{", " border-radius:", ";}}"], checked ? theme.colors.primary20 : theme.colors.secondary20, _ref10 => {
    let {
      theme
    } = _ref10;
    return theme.shadow.raised;
  }, _ref11 => {
    let {
      theme
    } = _ref11;
    return theme.borderRadius.circle;
  });
}, withTransition(['background, transform']), _ref12 => {
  let {
    theme
  } = _ref12;
  return theme.shadow.raised;
}, _ref13 => {
  let {
    checked,
    theme
  } = _ref13;
  return checked ? theme.colors.primary40 : theme.colors.white;
}, _ref14 => {
  let {
    theme
  } = _ref14;
  return theme.borderRadius.circle;
}, _ref15 => {
  let {
    theme
  } = _ref15;
  return theme.spacing.xLarge;
}, _ref16 => {
  let {
    theme
  } = _ref16;
  return theme.spacing.large;
}, _ref17 => {
  let {
    theme
  } = _ref17;
  return theme.helpers.remCalc(5);
}, _ref18 => {
  let {
    theme
  } = _ref18;
  return theme.spacing.xLarge;
}, _ref19 => {
  let {
    checked,
    disabled,
    theme
  } = _ref19;
  return disabled && css(["background:", ";cursor:not-allowed;"], checked ? theme.colors.primary30 : theme.colors.secondary10);
}, _ref20 => {
  let {
    checked
  } = _ref20;
  return !checked && css(["transform:translateX(-100%);"]);
});
StyledSwitchLabel.defaultProps = {
  theme: defaultTheme
};
HiddenCheckbox.defaultProps = {
  theme: defaultTheme
};