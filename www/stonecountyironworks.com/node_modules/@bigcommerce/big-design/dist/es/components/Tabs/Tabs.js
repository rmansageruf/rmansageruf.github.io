import _extends from "@babel/runtime/helpers/esm/extends";
import React, { memo } from 'react';
import { warning } from '../../utils';
import { StyledTab, StyledTabs } from './styled';
export const Tabs = /*#__PURE__*/memo(_ref => {
  let {
    activeTab,
    children,
    className,
    items = [],
    onTabClick,
    style,
    role,
    ...props
  } = _ref;
  const handleOnTabClick = event => {
    event.preventDefault();
    const tabId = event.currentTarget.id;
    if (tabId !== activeTab && typeof onTabClick === 'function') {
      onTabClick(tabId);
    }
  };
  const activeItem = activeTab && items[Number(activeTab)];
  const missingAriaControls = items.some(item => !item.ariaControls);
  const missingFallback = activeItem && !document.getElementById(activeItem.ariaControls || `${activeItem.id}-content`);
  if (missingAriaControls || missingFallback) {
    warning('TabItems must have an ariaControls field, otherwise, an element with fallback ID "{tab.id}-content" must exist in the DOM');
  }
  return /*#__PURE__*/React.createElement(StyledTabs, _extends({}, props, {
    flexDirection: "row",
    role: "tablist"
  }), items.map(_ref2 => {
    let {
      ariaControls,
      id,
      title,
      disabled
    } = _ref2;
    return /*#__PURE__*/React.createElement(StyledTab, {
      activeTab: activeTab,
      "aria-controls": ariaControls || `${id}-content`,
      "aria-selected": id === activeTab ? 'true' : 'false',
      disabled: disabled,
      id: id,
      key: id,
      onClick: handleOnTabClick,
      role: "tab",
      tabIndex: id === activeTab ? -1 : 0
    }, title);
  }));
});
Tabs.displayName = 'Tabs';