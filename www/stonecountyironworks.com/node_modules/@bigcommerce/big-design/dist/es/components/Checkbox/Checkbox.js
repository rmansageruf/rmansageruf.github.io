import _extends from "@babel/runtime/helpers/esm/extends";
import { CheckIcon, RemoveIcon } from '@bigcommerce/big-design-icons';
import React, { cloneElement, forwardRef, isValidElement, useId, useMemo } from 'react';
import { typedMemo, warning } from '../../utils';
import { Badge } from '../Badge';
import { FormControlDescription } from '../Form';
import { CheckboxLabel } from './Label';
import { CheckboxContainer, CheckboxLabelContainer, HiddenCheckbox, StyledCheckbox } from './styled';
const RawCheckbox = _ref => {
  let {
    checked,
    className,
    description,
    disabled,
    hiddenLabel,
    isIndeterminate,
    label,
    forwardedRef,
    style,
    badge,
    ...props
  } = _ref;
  const uniqueCheckboxId = useId();
  const labelId = useId();
  const id = props.id ? props.id : uniqueCheckboxId;
  const renderedLabel = useMemo(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/React.createElement(CheckboxLabel, {
        "aria-hidden": disabled,
        disabled: disabled,
        hidden: hiddenLabel,
        htmlFor: id,
        id: labelId
      }, label, badge ? /*#__PURE__*/React.createElement(Badge, _extends({
        marginLeft: "xSmall"
      }, badge)) : null);
    }
    if ( /*#__PURE__*/isValidElement(label) && label.type === CheckboxLabel) {
      return /*#__PURE__*/cloneElement(label, {
        hidden: hiddenLabel,
        htmlFor: id,
        id: labelId
      });
    }
    warning('label must be either a string or a CheckboxLabel component.');
  }, [badge, disabled, hiddenLabel, id, label, labelId]);
  const renderedDescription = useMemo(() => {
    if (!description) {
      return null;
    }
    const link = typeof description === 'object' ? description.link : undefined;
    const text = typeof description === 'object' ? description.text : description;
    return /*#__PURE__*/React.createElement(FormControlDescription, {
      link: link
    }, text);
  }, [description]);
  return /*#__PURE__*/React.createElement(CheckboxContainer, {
    className: className,
    style: style
  }, /*#__PURE__*/React.createElement(HiddenCheckbox, _extends({
    checked: checked,
    disabled: disabled,
    id: id,
    type: "checkbox"
  }, props, {
    "aria-checked": checked,
    "aria-labelledby": labelId,
    ref: checkbox => {
      if (checkbox && typeof isIndeterminate === 'boolean') {
        checkbox.indeterminate = !checked && isIndeterminate;
      }
      if (forwardedRef) {
        if (typeof forwardedRef === 'function') {
          forwardedRef(checkbox);
        } else {
          // RefObject.current is readonly in DefinitelyTyped
          // but in practice you can still write to it.
          // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065
          // @ts-expect-error TODO look into useImperativeHandle
          forwardedRef.current = checkbox;
        }
      }
    }
  })), /*#__PURE__*/React.createElement(StyledCheckbox, {
    "aria-hidden": true,
    checked: checked,
    disabled: disabled,
    htmlFor: id,
    isIndeterminate: isIndeterminate
  }, !checked && isIndeterminate ? /*#__PURE__*/React.createElement(RemoveIcon, null) : /*#__PURE__*/React.createElement(CheckIcon, null)), /*#__PURE__*/React.createElement(CheckboxLabelContainer, null, renderedLabel, renderedDescription));
};
export const Checkbox = typedMemo( /*#__PURE__*/forwardRef((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/React.createElement(RawCheckbox, _extends({}, props, {
    forwardedRef: ref
  }));
}));