import { useEffect, useState } from 'react';
const recursiveSearch = _ref => {
  let {
    nodes,
    expandedNodes,
    nodeMap
  } = _ref;
  return nodes.reduce((acc, id) => {
    if (expandedNodes.includes(id)) {
      const children = nodeMap.get(id)?.children;
      if (children) {
        const visibleChildren = recursiveSearch({
          nodes: children,
          expandedNodes,
          nodeMap
        });
        return acc.includes(id) ? [...acc, ...visibleChildren] : [...acc, id, ...visibleChildren];
      }
    }
    return [...acc, id];
  }, []);
};
const buildVisibleNodes = _ref2 => {
  let {
    expandedNodes,
    nodeMap
  } = _ref2;
  const entries = Array.from(nodeMap.entries());
  const parentNodes = entries.filter(_ref3 => {
    let [, value] = _ref3;
    return value.parent === undefined;
  }, []).map(_ref4 => {
    let [id] = _ref4;
    return id;
  });
  return recursiveSearch({
    nodes: parentNodes,
    expandedNodes,
    nodeMap
  });
};
export const useVisibleNodes = _ref5 => {
  let {
    expandedNodes,
    nodeMap
  } = _ref5;
  const [visibleNodes, setVisibleNodes] = useState(() => buildVisibleNodes({
    expandedNodes,
    nodeMap
  }));
  useEffect(() => {
    setVisibleNodes(buildVisibleNodes({
      expandedNodes,
      nodeMap
    }));
  }, [expandedNodes, nodeMap]);
  return {
    visibleNodes
  };
};