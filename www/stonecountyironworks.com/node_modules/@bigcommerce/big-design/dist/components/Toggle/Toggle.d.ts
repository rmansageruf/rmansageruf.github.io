import React from 'react';
import { InputLocalization } from '../Input/Input';
type RequireOneOf<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {
    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;
}[Keys];
interface ToggleItem<T> {
    value: T;
    label?: string;
    icon?: React.ReactNode;
}
type ToggleItemType<T> = RequireOneOf<ToggleItem<T>, 'icon' | 'label'>;
export interface ToggleProps<T> {
    id?: string;
    value: T;
    items: Array<ToggleItemType<T>>;
    label?: React.ReactChild;
    labelId?: string;
    disabled?: boolean;
    localization?: InputLocalization;
    onChange(id: T): void;
}
export declare const Toggle: <T>({ value: activeValue, disabled, items, label, labelId, localization, onChange, ...props }: ToggleProps<T>) => React.JSX.Element;
export {};
//# sourceMappingURL=Toggle.d.ts.map