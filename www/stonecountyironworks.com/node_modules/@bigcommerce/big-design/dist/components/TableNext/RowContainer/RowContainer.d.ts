import React from 'react';
import { OnItemSelectFn } from '../hooks';
import { RowProps } from '../Row';
import { TableExpandable, TableProps } from '../types';
interface InternalRowContainerProps<T> extends Pick<RowProps<T>, 'isChildrenRowsSelectable' | 'showDragIcon' | 'selectedItems' | 'item' | 'isSelectable' | 'isExpandable' | 'headerCellWidths' | 'columns' | 'isDragging'> {
    expandedRows: TableExpandable<T>['expandedRows'];
    getChildren?: TableExpandable<T>['getChildren'];
    getItemKey: (item: T, index: number) => string | number;
    headerless?: boolean;
    getLoadMoreAction?: TableExpandable<T>['getLoadMoreAction'];
    parentRowIndex: number;
    getRowId: NonNullable<TableProps<T>['getRowId']>;
    onItemSelect?: OnItemSelectFn;
    onExpandedRow?(parentRowId?: string | undefined): void;
}
export declare const RowContainer: React.ForwardRefExoticComponent<InternalRowContainerProps<any> & React.RefAttributes<HTMLTableRowElement>>;
export {};
//# sourceMappingURL=RowContainer.d.ts.map